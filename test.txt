{"_index":"linkschemas","_type":"_doc","_id":"5f3aa41885959b1980466246","_score":1.0816551,"_source":{"link":"\n            https://www.npmjs.com/package/react-cookie\n            ","data":"\n    \n    \n      react-cookie  -  npm\n      \n      \n      \n      \n    \n  \n  \n    npm is now a part of GitHub❤Node Package MaidProductsProTeamsPricingDocumentationCommunitynpmSearchSign UpSign InLearn about our RFC process, Open RFC meetings & more.Join in the discussion! »react-cookie4.0.3 • Public • Published 8 months ago Readme ExploreBETA3Dependencies334Dependents64Versions Hello {cookies.name}!\nreact-cookie\n\n\n  Universal cookies for React\n  \n\n\n\n\nIntegrations\n\nuniversal-cookie - Universal cookies for JavaScript\nuniversal-cookie-express - Hook cookies get/set on Express for server-rendering\n\nMinimum requirement\nreact-cookie @ v3.0+\n\nReact.js >= 16.3.0 (new context API + forward ref)\n\nreact-cookie @ v0.0-v2.2\n\nReact.js >= 15\n\nGetting started\nnpm install react-cookie\nor in the browser (global variable ReactCookie):\n<script  crossorigin  src=\"https://unpkg.com/react@16/umd/react.production.js\"></script> <script  crossorigin  src=\"https://unpkg.com/universal-cookie@3/umd/universalCookie.min.js\"></script> <script  crossorigin  src=\"https://unpkg.com/react-cookie@3/umd/reactCookie.min.js\"></script> \n<CookiesProvider />\nSet the user cookies\nOn the server, the cookies props must be set using req.universalCookies or new Cookie(cookieHeader)\nuseCookies([dependencies])\nAccess and modify cookies using React hooks.\nconst [cookies, setCookie, removeCookie] = useCookies(['cookie-name']);\nReact hooks are available starting from React 16.8\ndependencies (optional)\nLet you optionally specify a list of cookie names your component depend on or that should trigger a re-render. If unspecified, it will render on every cookie change.\ncookies\nJavascript object with all your cookies. The key is the cookie name.\nsetCookie(name, value, [options])\nSet a cookie value\n\nname (string): cookie name\nvalue (string|object): save the value and stringify the object if needed\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nremoveCookie(name, [options])\nRemove a cookie\n\nname (string): cookie name\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nwithCookies(Component)\nGive access to your cookies anywhere. Add the following props to your component:\n\ncookies: Cookies instance allowing you to get, set and remove cookies.\nallCookies: All your current cookies in an object.\n\nYour original static properties will be hoisted on the returned component. You can also access the original component by using the WrappedComponent static property. Example:\nfunction MyComponent() {  return null;}const NewComponent = withCookies(MyComponent);NewComponent.WrappedComponent === MyComponent;\nCookies\nget(name, [options])\nGet a cookie value\n\nname (string): cookie name\noptions (object):\n\ndoNotParse (boolean): do not convert the cookie into an object no matter what\n\n\n\ngetAll([options])\nGet all cookies\n\noptions (object):\n\ndoNotParse (boolean): do not convert the cookie into an object no matter what\n\n\n\nset(name, value, [options])\nSet a cookie value\n\nname (string): cookie name\nvalue (string|object): save the value and stringify the object if needed\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nremove(name, [options])\nRemove a cookie\n\nname (string): cookie name\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nSimple Example with React hooks\n// Root.jsximport React from 'react';import App from './App';import { CookiesProvider } from 'react-cookie'; export default function Root() {  return (    <CookiesProvider>      <App />    </CookiesProvider>  );}\n// App.jsximport React from 'react';import { useCookies } from 'react-cookie'; import NameForm from './NameForm'; function App() {  const [cookies, setCookie] = useCookies(['name']);   function onChange(newName) {    setCookie('name', newName, { path: '/' });  }   return (    <div>      <NameForm name={cookies.name} onChange={onChange} />      {cookies.name && <h1>Hello {cookies.name}!</h1>}    </div>  );} export default App;\nSimple Example with Higher-Order Component\n// Root.jsximport React from 'react';import App from './App';import { CookiesProvider } from 'react-cookie'; export default function Root() {  return (    <CookiesProvider>      <App />    </CookiesProvider>  );}\n// App.jsximport React, { Component } from 'react';import { instanceOf } from 'prop-types';import { withCookies, Cookies } from 'react-cookie'; import NameForm from './NameForm'; class App extends Component {  static propTypes = {    cookies: instanceOf(Cookies).isRequired  };   constructor(props) {    super(props);     const { cookies } = props;    this.state = {      name: cookies.get('name') || 'Ben'    };  }   handleNameChange(name) {    const { cookies } = this.props;     cookies.set('name', name, { path: '/' });    this.setState({ name });  }   render() {    const { name } = this.state;     return (      <div>        <NameForm name={name} onChange={this.handleNameChange.bind(this)} />        {this.state.name && <h1>Hello {this.state.name}!</h1>}      </div>    );  }} export default withCookies(App);\nServer-Rendering Example\n// src/components/App.jsimport React from 'react';import { useCookies } from 'react-cookie'; import NameForm from './NameForm'; function App() {  const [cookies, setCookie] = useCookies(['name']);   function onChange(newName) {    setCookie('name', newName, { path: '/' });  }   return (    <div>      <NameForm name={cookies.name} onChange={onChange} />      {cookies.name && <h1>Hello {cookies.name}!</h1>}    </div>  );} export default App;\n// src/server.jsimport React from 'react';import ReactDOMServer from 'react-dom/server';import { CookiesProvider } from 'react-cookie'; import Html from './components/Html';import App from './components/App'; export default function middleware(req, res) {  const markup = ReactDOMServer.renderToString(    <CookiesProvider cookies={req.universalCookies}>      <App />    </CookiesProvider>  );   const html = ReactDOMServer.renderToStaticMarkup(<Html markup={markup} />);   res.send('<!DOCTYPE html>' + html);}\n// src/client.jsimport React from 'react';import ReactDOM from 'react-dom';import { CookiesProvider } from 'react-cookie'; import App from './components/App'; const appEl = document.getElementById('main-app'); ReactDOM.render(  <CookiesProvider>    <App />  </CookiesProvider>,  appEl);\n// server.jsrequire('@babel/register'); const express = require('express');const serverMiddleware = require('./src/server').default;const cookiesMiddleware = require('universal-cookie-express'); const app = express(); app  .use('/assets', express.static('dist'))  .use(cookiesMiddleware())  .use(serverMiddleware); app.listen(8080, function() {  console.log('Listening on 8080...');});\nKeywordsuniversalisomophiccookiereactInstallnpm i react-cookieDownloadsWeekly Downloads174,284Version4.0.3LicenseMITUnpacked Size96 kBTotal Files48Homepagegithub.com/reactivestack/cookies/tree/master/packages/react-cookie/#readmeRepositoryGitgithub.com/reactivestack/cookiesLast publish8 months agoCollaboratorsTry on RunKitReport a vulnerabilitySupportHelpCommunityAdvisoriesStatusContact npmCompanyAboutBlogPressTerms & PoliciesPoliciesTerms of UseCode of ConductPrivacy\n\n\n  \n\n \n    \n    \n      react-cookie  -  npm\n      \n      \n      \n      \n    \n     react-cookie  -  npm                               \n    npm is now a part of GitHub❤Node Package MaidProductsProTeamsPricingDocumentationCommunitynpmSearchSign UpSign InLearn about our RFC process, Open RFC meetings & more.Join in the discussion! »react-cookie4.0.3 • Public • Published 8 months ago Readme ExploreBETA3Dependencies334Dependents64Versions Hello {cookies.name}!\nreact-cookie\n\n\n  Universal cookies for React\n  \n\n\n\n\nIntegrations\n\nuniversal-cookie - Universal cookies for JavaScript\nuniversal-cookie-express - Hook cookies get/set on Express for server-rendering\n\nMinimum requirement\nreact-cookie @ v3.0+\n\nReact.js >= 16.3.0 (new context API + forward ref)\n\nreact-cookie @ v0.0-v2.2\n\nReact.js >= 15\n\nGetting started\nnpm install react-cookie\nor in the browser (global variable ReactCookie):\n<script  crossorigin  src=\"https://unpkg.com/react@16/umd/react.production.js\"></script> <script  crossorigin  src=\"https://unpkg.com/universal-cookie@3/umd/universalCookie.min.js\"></script> <script  crossorigin  src=\"https://unpkg.com/react-cookie@3/umd/reactCookie.min.js\"></script> \n<CookiesProvider />\nSet the user cookies\nOn the server, the cookies props must be set using req.universalCookies or new Cookie(cookieHeader)\nuseCookies([dependencies])\nAccess and modify cookies using React hooks.\nconst [cookies, setCookie, removeCookie] = useCookies(['cookie-name']);\nReact hooks are available starting from React 16.8\ndependencies (optional)\nLet you optionally specify a list of cookie names your component depend on or that should trigger a re-render. If unspecified, it will render on every cookie change.\ncookies\nJavascript object with all your cookies. The key is the cookie name.\nsetCookie(name, value, [options])\nSet a cookie value\n\nname (string): cookie name\nvalue (string|object): save the value and stringify the object if needed\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nremoveCookie(name, [options])\nRemove a cookie\n\nname (string): cookie name\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nwithCookies(Component)\nGive access to your cookies anywhere. Add the following props to your component:\n\ncookies: Cookies instance allowing you to get, set and remove cookies.\nallCookies: All your current cookies in an object.\n\nYour original static properties will be hoisted on the returned component. You can also access the original component by using the WrappedComponent static property. Example:\nfunction MyComponent() {  return null;}const NewComponent = withCookies(MyComponent);NewComponent.WrappedComponent === MyComponent;\nCookies\nget(name, [options])\nGet a cookie value\n\nname (string): cookie name\noptions (object):\n\ndoNotParse (boolean): do not convert the cookie into an object no matter what\n\n\n\ngetAll([options])\nGet all cookies\n\noptions (object):\n\ndoNotParse (boolean): do not convert the cookie into an object no matter what\n\n\n\nset(name, value, [options])\nSet a cookie value\n\nname (string): cookie name\nvalue (string|object): save the value and stringify the object if needed\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nremove(name, [options])\nRemove a cookie\n\nname (string): cookie name\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nSimple Example with React hooks\n// Root.jsximport React from 'react';import App from './App';import { CookiesProvider } from 'react-cookie'; export default function Root() {  return (    <CookiesProvider>      <App />    </CookiesProvider>  );}\n// App.jsximport React from 'react';import { useCookies } from 'react-cookie'; import NameForm from './NameForm'; function App() {  const [cookies, setCookie] = useCookies(['name']);   function onChange(newName) {    setCookie('name', newName, { path: '/' });  }   return (    <div>      <NameForm name={cookies.name} onChange={onChange} />      {cookies.name && <h1>Hello {cookies.name}!</h1>}    </div>  );} export default App;\nSimple Example with Higher-Order Component\n// Root.jsximport React from 'react';import App from './App';import { CookiesProvider } from 'react-cookie'; export default function Root() {  return (    <CookiesProvider>      <App />    </CookiesProvider>  );}\n// App.jsximport React, { Component } from 'react';import { instanceOf } from 'prop-types';import { withCookies, Cookies } from 'react-cookie'; import NameForm from './NameForm'; class App extends Component {  static propTypes = {    cookies: instanceOf(Cookies).isRequired  };   constructor(props) {    super(props);     const { cookies } = props;    this.state = {      name: cookies.get('name') || 'Ben'    };  }   handleNameChange(name) {    const { cookies } = this.props;     cookies.set('name', name, { path: '/' });    this.setState({ name });  }   render() {    const { name } = this.state;     return (      <div>        <NameForm name={name} onChange={this.handleNameChange.bind(this)} />        {this.state.name && <h1>Hello {this.state.name}!</h1>}      </div>    );  }} export default withCookies(App);\nServer-Rendering Example\n// src/components/App.jsimport React from 'react';import { useCookies } from 'react-cookie'; import NameForm from './NameForm'; function App() {  const [cookies, setCookie] = useCookies(['name']);   function onChange(newName) {    setCookie('name', newName, { path: '/' });  }   return (    <div>      <NameForm name={cookies.name} onChange={onChange} />      {cookies.name && <h1>Hello {cookies.name}!</h1>}    </div>  );} export default App;\n// src/server.jsimport React from 'react';import ReactDOMServer from 'react-dom/server';import { CookiesProvider } from 'react-cookie'; import Html from './components/Html';import App from './components/App'; export default function middleware(req, res) {  const markup = ReactDOMServer.renderToString(    <CookiesProvider cookies={req.universalCookies}>      <App />    </CookiesProvider>  );   const html = ReactDOMServer.renderToStaticMarkup(<Html markup={markup} />);   res.send('<!DOCTYPE html>' + html);}\n// src/client.jsimport React from 'react';import ReactDOM from 'react-dom';import { CookiesProvider } from 'react-cookie'; import App from './components/App'; const appEl = document.getElementById('main-app'); ReactDOM.render(  <CookiesProvider>    <App />  </CookiesProvider>,  appEl);\n// server.jsrequire('@babel/register'); const express = require('express');const serverMiddleware = require('./src/server').default;const cookiesMiddleware = require('universal-cookie-express'); const app = express(); app  .use('/assets', express.static('dist'))  .use(cookiesMiddleware())  .use(serverMiddleware); app.listen(8080, function() {  console.log('Listening on 8080...');});\nKeywordsuniversalisomophiccookiereactInstallnpm i react-cookieDownloadsWeekly Downloads174,284Version4.0.3LicenseMITUnpacked Size96 kBTotal Files48Homepagegithub.com/reactivestack/cookies/tree/master/packages/react-cookie/#readmeRepositoryGitgithub.com/reactivestack/cookiesLast publish8 months agoCollaboratorsTry on RunKitReport a vulnerabilitySupportHelpCommunityAdvisoriesStatusContact npmCompanyAboutBlogPressTerms & PoliciesPoliciesTerms of UseCode of ConductPrivacy\n\n\n  \n\n npm is now a part of GitHub❤Node Package MaidProductsProTeamsPricingDocumentationCommunitynpmSearchSign UpSign InLearn about our RFC process, Open RFC meetings & more.Join in the discussion! »react-cookie4.0.3 • Public • Published 8 months ago Readme ExploreBETA3Dependencies334Dependents64Versions Hello {cookies.name}!\nreact-cookie\n\n\n  Universal cookies for React\n  \n\n\n\n\nIntegrations\n\nuniversal-cookie - Universal cookies for JavaScript\nuniversal-cookie-express - Hook cookies get/set on Express for server-rendering\n\nMinimum requirement\nreact-cookie @ v3.0+\n\nReact.js >= 16.3.0 (new context API + forward ref)\n\nreact-cookie @ v0.0-v2.2\n\nReact.js >= 15\n\nGetting started\nnpm install react-cookie\nor in the browser (global variable ReactCookie):\n<script  crossorigin  src=\"https://unpkg.com/react@16/umd/react.production.js\"></script> <script  crossorigin  src=\"https://unpkg.com/universal-cookie@3/umd/universalCookie.min.js\"></script> <script  crossorigin  src=\"https://unpkg.com/react-cookie@3/umd/reactCookie.min.js\"></script> \n<CookiesProvider />\nSet the user cookies\nOn the server, the cookies props must be set using req.universalCookies or new Cookie(cookieHeader)\nuseCookies([dependencies])\nAccess and modify cookies using React hooks.\nconst [cookies, setCookie, removeCookie] = useCookies(['cookie-name']);\nReact hooks are available starting from React 16.8\ndependencies (optional)\nLet you optionally specify a list of cookie names your component depend on or that should trigger a re-render. If unspecified, it will render on every cookie change.\ncookies\nJavascript object with all your cookies. The key is the cookie name.\nsetCookie(name, value, [options])\nSet a cookie value\n\nname (string): cookie name\nvalue (string|object): save the value and stringify the object if needed\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nremoveCookie(name, [options])\nRemove a cookie\n\nname (string): cookie name\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nwithCookies(Component)\nGive access to your cookies anywhere. Add the following props to your component:\n\ncookies: Cookies instance allowing you to get, set and remove cookies.\nallCookies: All your current cookies in an object.\n\nYour original static properties will be hoisted on the returned component. You can also access the original component by using the WrappedComponent static property. Example:\nfunction MyComponent() {  return null;}const NewComponent = withCookies(MyComponent);NewComponent.WrappedComponent === MyComponent;\nCookies\nget(name, [options])\nGet a cookie value\n\nname (string): cookie name\noptions (object):\n\ndoNotParse (boolean): do not convert the cookie into an object no matter what\n\n\n\ngetAll([options])\nGet all cookies\n\noptions (object):\n\ndoNotParse (boolean): do not convert the cookie into an object no matter what\n\n\n\nset(name, value, [options])\nSet a cookie value\n\nname (string): cookie name\nvalue (string|object): save the value and stringify the object if needed\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nremove(name, [options])\nRemove a cookie\n\nname (string): cookie name\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nSimple Example with React hooks\n// Root.jsximport React from 'react';import App from './App';import { CookiesProvider } from 'react-cookie'; export default function Root() {  return (    <CookiesProvider>      <App />    </CookiesProvider>  );}\n// App.jsximport React from 'react';import { useCookies } from 'react-cookie'; import NameForm from './NameForm'; function App() {  const [cookies, setCookie] = useCookies(['name']);   function onChange(newName) {    setCookie('name', newName, { path: '/' });  }   return (    <div>      <NameForm name={cookies.name} onChange={onChange} />      {cookies.name && <h1>Hello {cookies.name}!</h1>}    </div>  );} export default App;\nSimple Example with Higher-Order Component\n// Root.jsximport React from 'react';import App from './App';import { CookiesProvider } from 'react-cookie'; export default function Root() {  return (    <CookiesProvider>      <App />    </CookiesProvider>  );}\n// App.jsximport React, { Component } from 'react';import { instanceOf } from 'prop-types';import { withCookies, Cookies } from 'react-cookie'; import NameForm from './NameForm'; class App extends Component {  static propTypes = {    cookies: instanceOf(Cookies).isRequired  };   constructor(props) {    super(props);     const { cookies } = props;    this.state = {      name: cookies.get('name') || 'Ben'    };  }   handleNameChange(name) {    const { cookies } = this.props;     cookies.set('name', name, { path: '/' });    this.setState({ name });  }   render() {    const { name } = this.state;     return (      <div>        <NameForm name={name} onChange={this.handleNameChange.bind(this)} />        {this.state.name && <h1>Hello {this.state.name}!</h1>}      </div>    );  }} export default withCookies(App);\nServer-Rendering Example\n// src/components/App.jsimport React from 'react';import { useCookies } from 'react-cookie'; import NameForm from './NameForm'; function App() {  const [cookies, setCookie] = useCookies(['name']);   function onChange(newName) {    setCookie('name', newName, { path: '/' });  }   return (    <div>      <NameForm name={cookies.name} onChange={onChange} />      {cookies.name && <h1>Hello {cookies.name}!</h1>}    </div>  );} export default App;\n// src/server.jsimport React from 'react';import ReactDOMServer from 'react-dom/server';import { CookiesProvider } from 'react-cookie'; import Html from './components/Html';import App from './components/App'; export default function middleware(req, res) {  const markup = ReactDOMServer.renderToString(    <CookiesProvider cookies={req.universalCookies}>      <App />    </CookiesProvider>  );   const html = ReactDOMServer.renderToStaticMarkup(<Html markup={markup} />);   res.send('<!DOCTYPE html>' + html);}\n// src/client.jsimport React from 'react';import ReactDOM from 'react-dom';import { CookiesProvider } from 'react-cookie'; import App from './components/App'; const appEl = document.getElementById('main-app'); ReactDOM.render(  <CookiesProvider>    <App />  </CookiesProvider>,  appEl);\n// server.jsrequire('@babel/register'); const express = require('express');const serverMiddleware = require('./src/server').default;const cookiesMiddleware = require('universal-cookie-express'); const app = express(); app  .use('/assets', express.static('dist'))  .use(cookiesMiddleware())  .use(serverMiddleware); app.listen(8080, function() {  console.log('Listening on 8080...');});\nKeywordsuniversalisomophiccookiereactInstallnpm i react-cookieDownloadsWeekly Downloads174,284Version4.0.3LicenseMITUnpacked Size96 kBTotal Files48Homepagegithub.com/reactivestack/cookies/tree/master/packages/react-cookie/#readmeRepositoryGitgithub.com/reactivestack/cookiesLast publish8 months agoCollaboratorsTry on RunKitReport a vulnerabilitySupportHelpCommunityAdvisoriesStatusContact npmCompanyAboutBlogPressTerms & PoliciesPoliciesTerms of UseCode of ConductPrivacy npm is now a part of GitHub❤Node Package MaidProductsProTeamsPricingDocumentationCommunitynpmSearchSign UpSign InLearn about our RFC process, Open RFC meetings & more.Join in the discussion! »react-cookie4.0.3 • Public • Published 8 months ago Readme ExploreBETA3Dependencies334Dependents64Versions Hello {cookies.name}!\nreact-cookie\n\n\n  Universal cookies for React\n  \n\n\n\n\nIntegrations\n\nuniversal-cookie - Universal cookies for JavaScript\nuniversal-cookie-express - Hook cookies get/set on Express for server-rendering\n\nMinimum requirement\nreact-cookie @ v3.0+\n\nReact.js >= 16.3.0 (new context API + forward ref)\n\nreact-cookie @ v0.0-v2.2\n\nReact.js >= 15\n\nGetting started\nnpm install react-cookie\nor in the browser (global variable ReactCookie):\n<script  crossorigin  src=\"https://unpkg.com/react@16/umd/react.production.js\"></script> <script  crossorigin  src=\"https://unpkg.com/universal-cookie@3/umd/universalCookie.min.js\"></script> <script  crossorigin  src=\"https://unpkg.com/react-cookie@3/umd/reactCookie.min.js\"></script> \n<CookiesProvider />\nSet the user cookies\nOn the server, the cookies props must be set using req.universalCookies or new Cookie(cookieHeader)\nuseCookies([dependencies])\nAccess and modify cookies using React hooks.\nconst [cookies, setCookie, removeCookie] = useCookies(['cookie-name']);\nReact hooks are available starting from React 16.8\ndependencies (optional)\nLet you optionally specify a list of cookie names your component depend on or that should trigger a re-render. If unspecified, it will render on every cookie change.\ncookies\nJavascript object with all your cookies. The key is the cookie name.\nsetCookie(name, value, [options])\nSet a cookie value\n\nname (string): cookie name\nvalue (string|object): save the value and stringify the object if needed\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nremoveCookie(name, [options])\nRemove a cookie\n\nname (string): cookie name\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nwithCookies(Component)\nGive access to your cookies anywhere. Add the following props to your component:\n\ncookies: Cookies instance allowing you to get, set and remove cookies.\nallCookies: All your current cookies in an object.\n\nYour original static properties will be hoisted on the returned component. You can also access the original component by using the WrappedComponent static property. Example:\nfunction MyComponent() {  return null;}const NewComponent = withCookies(MyComponent);NewComponent.WrappedComponent === MyComponent;\nCookies\nget(name, [options])\nGet a cookie value\n\nname (string): cookie name\noptions (object):\n\ndoNotParse (boolean): do not convert the cookie into an object no matter what\n\n\n\ngetAll([options])\nGet all cookies\n\noptions (object):\n\ndoNotParse (boolean): do not convert the cookie into an object no matter what\n\n\n\nset(name, value, [options])\nSet a cookie value\n\nname (string): cookie name\nvalue (string|object): save the value and stringify the object if needed\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nremove(name, [options])\nRemove a cookie\n\nname (string): cookie name\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nSimple Example with React hooks\n// Root.jsximport React from 'react';import App from './App';import { CookiesProvider } from 'react-cookie'; export default function Root() {  return (    <CookiesProvider>      <App />    </CookiesProvider>  );}\n// App.jsximport React from 'react';import { useCookies } from 'react-cookie'; import NameForm from './NameForm'; function App() {  const [cookies, setCookie] = useCookies(['name']);   function onChange(newName) {    setCookie('name', newName, { path: '/' });  }   return (    <div>      <NameForm name={cookies.name} onChange={onChange} />      {cookies.name && <h1>Hello {cookies.name}!</h1>}    </div>  );} export default App;\nSimple Example with Higher-Order Component\n// Root.jsximport React from 'react';import App from './App';import { CookiesProvider } from 'react-cookie'; export default function Root() {  return (    <CookiesProvider>      <App />    </CookiesProvider>  );}\n// App.jsximport React, { Component } from 'react';import { instanceOf } from 'prop-types';import { withCookies, Cookies } from 'react-cookie'; import NameForm from './NameForm'; class App extends Component {  static propTypes = {    cookies: instanceOf(Cookies).isRequired  };   constructor(props) {    super(props);     const { cookies } = props;    this.state = {      name: cookies.get('name') || 'Ben'    };  }   handleNameChange(name) {    const { cookies } = this.props;     cookies.set('name', name, { path: '/' });    this.setState({ name });  }   render() {    const { name } = this.state;     return (      <div>        <NameForm name={name} onChange={this.handleNameChange.bind(this)} />        {this.state.name && <h1>Hello {this.state.name}!</h1>}      </div>    );  }} export default withCookies(App);\nServer-Rendering Example\n// src/components/App.jsimport React from 'react';import { useCookies } from 'react-cookie'; import NameForm from './NameForm'; function App() {  const [cookies, setCookie] = useCookies(['name']);   function onChange(newName) {    setCookie('name', newName, { path: '/' });  }   return (    <div>      <NameForm name={cookies.name} onChange={onChange} />      {cookies.name && <h1>Hello {cookies.name}!</h1>}    </div>  );} export default App;\n// src/server.jsimport React from 'react';import ReactDOMServer from 'react-dom/server';import { CookiesProvider } from 'react-cookie'; import Html from './components/Html';import App from './components/App'; export default function middleware(req, res) {  const markup = ReactDOMServer.renderToString(    <CookiesProvider cookies={req.universalCookies}>      <App />    </CookiesProvider>  );   const html = ReactDOMServer.renderToStaticMarkup(<Html markup={markup} />);   res.send('<!DOCTYPE html>' + html);}\n// src/client.jsimport React from 'react';import ReactDOM from 'react-dom';import { CookiesProvider } from 'react-cookie'; import App from './components/App'; const appEl = document.getElementById('main-app'); ReactDOM.render(  <CookiesProvider>    <App />  </CookiesProvider>,  appEl);\n// server.jsrequire('@babel/register'); const express = require('express');const serverMiddleware = require('./src/server').default;const cookiesMiddleware = require('universal-cookie-express'); const app = express(); app  .use('/assets', express.static('dist'))  .use(cookiesMiddleware())  .use(serverMiddleware); app.listen(8080, function() {  console.log('Listening on 8080...');});\nKeywordsuniversalisomophiccookiereactInstallnpm i react-cookieDownloadsWeekly Downloads174,284Version4.0.3LicenseMITUnpacked Size96 kBTotal Files48Homepagegithub.com/reactivestack/cookies/tree/master/packages/react-cookie/#readmeRepositoryGitgithub.com/reactivestack/cookiesLast publish8 months agoCollaboratorsTry on RunKitReport a vulnerabilitySupportHelpCommunityAdvisoriesStatusContact npmCompanyAboutBlogPressTerms & PoliciesPoliciesTerms of UseCode of ConductPrivacy  npm is now a part of GitHub❤Node Package MaidProductsProTeamsPricingDocumentationCommunitynpmSearchSign UpSign InLearn about our RFC process, Open RFC meetings & more.Join in the discussion! »react-cookie4.0.3 • Public • Published 8 months ago Readme ExploreBETA3Dependencies334Dependents64Versions Hello {cookies.name}!\nreact-cookie\n\n\n  Universal cookies for React\n  \n\n\n\n\nIntegrations\n\nuniversal-cookie - Universal cookies for JavaScript\nuniversal-cookie-express - Hook cookies get/set on Express for server-rendering\n\nMinimum requirement\nreact-cookie @ v3.0+\n\nReact.js >= 16.3.0 (new context API + forward ref)\n\nreact-cookie @ v0.0-v2.2\n\nReact.js >= 15\n\nGetting started\nnpm install react-cookie\nor in the browser (global variable ReactCookie):\n<script  crossorigin  src=\"https://unpkg.com/react@16/umd/react.production.js\"></script> <script  crossorigin  src=\"https://unpkg.com/universal-cookie@3/umd/universalCookie.min.js\"></script> <script  crossorigin  src=\"https://unpkg.com/react-cookie@3/umd/reactCookie.min.js\"></script> \n<CookiesProvider />\nSet the user cookies\nOn the server, the cookies props must be set using req.universalCookies or new Cookie(cookieHeader)\nuseCookies([dependencies])\nAccess and modify cookies using React hooks.\nconst [cookies, setCookie, removeCookie] = useCookies(['cookie-name']);\nReact hooks are available starting from React 16.8\ndependencies (optional)\nLet you optionally specify a list of cookie names your component depend on or that should trigger a re-render. If unspecified, it will render on every cookie change.\ncookies\nJavascript object with all your cookies. The key is the cookie name.\nsetCookie(name, value, [options])\nSet a cookie value\n\nname (string): cookie name\nvalue (string|object): save the value and stringify the object if needed\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nremoveCookie(name, [options])\nRemove a cookie\n\nname (string): cookie name\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nwithCookies(Component)\nGive access to your cookies anywhere. Add the following props to your component:\n\ncookies: Cookies instance allowing you to get, set and remove cookies.\nallCookies: All your current cookies in an object.\n\nYour original static properties will be hoisted on the returned component. You can also access the original component by using the WrappedComponent static property. Example:\nfunction MyComponent() {  return null;}const NewComponent = withCookies(MyComponent);NewComponent.WrappedComponent === MyComponent;\nCookies\nget(name, [options])\nGet a cookie value\n\nname (string): cookie name\noptions (object):\n\ndoNotParse (boolean): do not convert the cookie into an object no matter what\n\n\n\ngetAll([options])\nGet all cookies\n\noptions (object):\n\ndoNotParse (boolean): do not convert the cookie into an object no matter what\n\n\n\nset(name, value, [options])\nSet a cookie value\n\nname (string): cookie name\nvalue (string|object): save the value and stringify the object if needed\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nremove(name, [options])\nRemove a cookie\n\nname (string): cookie name\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nSimple Example with React hooks\n// Root.jsximport React from 'react';import App from './App';import { CookiesProvider } from 'react-cookie'; export default function Root() {  return (    <CookiesProvider>      <App />    </CookiesProvider>  );}\n// App.jsximport React from 'react';import { useCookies } from 'react-cookie'; import NameForm from './NameForm'; function App() {  const [cookies, setCookie] = useCookies(['name']);   function onChange(newName) {    setCookie('name', newName, { path: '/' });  }   return (    <div>      <NameForm name={cookies.name} onChange={onChange} />      {cookies.name && <h1>Hello {cookies.name}!</h1>}    </div>  );} export default App;\nSimple Example with Higher-Order Component\n// Root.jsximport React from 'react';import App from './App';import { CookiesProvider } from 'react-cookie'; export default function Root() {  return (    <CookiesProvider>      <App />    </CookiesProvider>  );}\n// App.jsximport React, { Component } from 'react';import { instanceOf } from 'prop-types';import { withCookies, Cookies } from 'react-cookie'; import NameForm from './NameForm'; class App extends Component {  static propTypes = {    cookies: instanceOf(Cookies).isRequired  };   constructor(props) {    super(props);     const { cookies } = props;    this.state = {      name: cookies.get('name') || 'Ben'    };  }   handleNameChange(name) {    const { cookies } = this.props;     cookies.set('name', name, { path: '/' });    this.setState({ name });  }   render() {    const { name } = this.state;     return (      <div>        <NameForm name={name} onChange={this.handleNameChange.bind(this)} />        {this.state.name && <h1>Hello {this.state.name}!</h1>}      </div>    );  }} export default withCookies(App);\nServer-Rendering Example\n// src/components/App.jsimport React from 'react';import { useCookies } from 'react-cookie'; import NameForm from './NameForm'; function App() {  const [cookies, setCookie] = useCookies(['name']);   function onChange(newName) {    setCookie('name', newName, { path: '/' });  }   return (    <div>      <NameForm name={cookies.name} onChange={onChange} />      {cookies.name && <h1>Hello {cookies.name}!</h1>}    </div>  );} export default App;\n// src/server.jsimport React from 'react';import ReactDOMServer from 'react-dom/server';import { CookiesProvider } from 'react-cookie'; import Html from './components/Html';import App from './components/App'; export default function middleware(req, res) {  const markup = ReactDOMServer.renderToString(    <CookiesProvider cookies={req.universalCookies}>      <App />    </CookiesProvider>  );   const html = ReactDOMServer.renderToStaticMarkup(<Html markup={markup} />);   res.send('<!DOCTYPE html>' + html);}\n// src/client.jsimport React from 'react';import ReactDOM from 'react-dom';import { CookiesProvider } from 'react-cookie'; import App from './components/App'; const appEl = document.getElementById('main-app'); ReactDOM.render(  <CookiesProvider>    <App />  </CookiesProvider>,  appEl);\n// server.jsrequire('@babel/register'); const express = require('express');const serverMiddleware = require('./src/server').default;const cookiesMiddleware = require('universal-cookie-express'); const app = express(); app  .use('/assets', express.static('dist'))  .use(cookiesMiddleware())  .use(serverMiddleware); app.listen(8080, function() {  console.log('Listening on 8080...');});\nKeywordsuniversalisomophiccookiereactInstallnpm i react-cookieDownloadsWeekly Downloads174,284Version4.0.3LicenseMITUnpacked Size96 kBTotal Files48Homepagegithub.com/reactivestack/cookies/tree/master/packages/react-cookie/#readmeRepositoryGitgithub.com/reactivestack/cookiesLast publish8 months agoCollaboratorsTry on RunKitReport a vulnerabilitySupportHelpCommunityAdvisoriesStatusContact npmCompanyAboutBlogPressTerms & PoliciesPoliciesTerms of UseCode of ConductPrivacy npm is now a part of GitHub❤Node Package MaidProductsProTeamsPricingDocumentationCommunitynpmSearchSign UpSign In npm is now a part of GitHub npm is now a part of GitHub   npm is now a part of GitHub npm GitHub      ❤Node Package MaidProductsProTeamsPricingDocumentationCommunity ❤Node Package MaidProductsProTeamsPricingDocumentationCommunity ❤ Node Package Maid ProductsProTeamsPricingDocumentationCommunity ProductsProTeamsPricingDocumentationCommunity ProductsProTeams Products Products ProTeams Pro Pro Teams Teams Pricing Pricing Documentation Documentation Community Community npmSearchSign UpSign In npmSearchSign UpSign In npm     Search Search           Search  Sign UpSign In Sign UpSign In Sign Up Sign In Learn about our RFC process, Open RFC meetings & more.Join in the discussion! »react-cookie4.0.3 • Public • Published 8 months ago Readme ExploreBETA3Dependencies334Dependents64Versions Hello {cookies.name}!\nreact-cookie\n\n\n  Universal cookies for React\n  \n\n\n\n\nIntegrations\n\nuniversal-cookie - Universal cookies for JavaScript\nuniversal-cookie-express - Hook cookies get/set on Express for server-rendering\n\nMinimum requirement\nreact-cookie @ v3.0+\n\nReact.js >= 16.3.0 (new context API + forward ref)\n\nreact-cookie @ v0.0-v2.2\n\nReact.js >= 15\n\nGetting started\nnpm install react-cookie\nor in the browser (global variable ReactCookie):\n<script  crossorigin  src=\"https://unpkg.com/react@16/umd/react.production.js\"></script> <script  crossorigin  src=\"https://unpkg.com/universal-cookie@3/umd/universalCookie.min.js\"></script> <script  crossorigin  src=\"https://unpkg.com/react-cookie@3/umd/reactCookie.min.js\"></script> \n<CookiesProvider />\nSet the user cookies\nOn the server, the cookies props must be set using req.universalCookies or new Cookie(cookieHeader)\nuseCookies([dependencies])\nAccess and modify cookies using React hooks.\nconst [cookies, setCookie, removeCookie] = useCookies(['cookie-name']);\nReact hooks are available starting from React 16.8\ndependencies (optional)\nLet you optionally specify a list of cookie names your component depend on or that should trigger a re-render. If unspecified, it will render on every cookie change.\ncookies\nJavascript object with all your cookies. The key is the cookie name.\nsetCookie(name, value, [options])\nSet a cookie value\n\nname (string): cookie name\nvalue (string|object): save the value and stringify the object if needed\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nremoveCookie(name, [options])\nRemove a cookie\n\nname (string): cookie name\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nwithCookies(Component)\nGive access to your cookies anywhere. Add the following props to your component:\n\ncookies: Cookies instance allowing you to get, set and remove cookies.\nallCookies: All your current cookies in an object.\n\nYour original static properties will be hoisted on the returned component. You can also access the original component by using the WrappedComponent static property. Example:\nfunction MyComponent() {  return null;}const NewComponent = withCookies(MyComponent);NewComponent.WrappedComponent === MyComponent;\nCookies\nget(name, [options])\nGet a cookie value\n\nname (string): cookie name\noptions (object):\n\ndoNotParse (boolean): do not convert the cookie into an object no matter what\n\n\n\ngetAll([options])\nGet all cookies\n\noptions (object):\n\ndoNotParse (boolean): do not convert the cookie into an object no matter what\n\n\n\nset(name, value, [options])\nSet a cookie value\n\nname (string): cookie name\nvalue (string|object): save the value and stringify the object if needed\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nremove(name, [options])\nRemove a cookie\n\nname (string): cookie name\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nSimple Example with React hooks\n// Root.jsximport React from 'react';import App from './App';import { CookiesProvider } from 'react-cookie'; export default function Root() {  return (    <CookiesProvider>      <App />    </CookiesProvider>  );}\n// App.jsximport React from 'react';import { useCookies } from 'react-cookie'; import NameForm from './NameForm'; function App() {  const [cookies, setCookie] = useCookies(['name']);   function onChange(newName) {    setCookie('name', newName, { path: '/' });  }   return (    <div>      <NameForm name={cookies.name} onChange={onChange} />      {cookies.name && <h1>Hello {cookies.name}!</h1>}    </div>  );} export default App;\nSimple Example with Higher-Order Component\n// Root.jsximport React from 'react';import App from './App';import { CookiesProvider } from 'react-cookie'; export default function Root() {  return (    <CookiesProvider>      <App />    </CookiesProvider>  );}\n// App.jsximport React, { Component } from 'react';import { instanceOf } from 'prop-types';import { withCookies, Cookies } from 'react-cookie'; import NameForm from './NameForm'; class App extends Component {  static propTypes = {    cookies: instanceOf(Cookies).isRequired  };   constructor(props) {    super(props);     const { cookies } = props;    this.state = {      name: cookies.get('name') || 'Ben'    };  }   handleNameChange(name) {    const { cookies } = this.props;     cookies.set('name', name, { path: '/' });    this.setState({ name });  }   render() {    const { name } = this.state;     return (      <div>        <NameForm name={name} onChange={this.handleNameChange.bind(this)} />        {this.state.name && <h1>Hello {this.state.name}!</h1>}      </div>    );  }} export default withCookies(App);\nServer-Rendering Example\n// src/components/App.jsimport React from 'react';import { useCookies } from 'react-cookie'; import NameForm from './NameForm'; function App() {  const [cookies, setCookie] = useCookies(['name']);   function onChange(newName) {    setCookie('name', newName, { path: '/' });  }   return (    <div>      <NameForm name={cookies.name} onChange={onChange} />      {cookies.name && <h1>Hello {cookies.name}!</h1>}    </div>  );} export default App;\n// src/server.jsimport React from 'react';import ReactDOMServer from 'react-dom/server';import { CookiesProvider } from 'react-cookie'; import Html from './components/Html';import App from './components/App'; export default function middleware(req, res) {  const markup = ReactDOMServer.renderToString(    <CookiesProvider cookies={req.universalCookies}>      <App />    </CookiesProvider>  );   const html = ReactDOMServer.renderToStaticMarkup(<Html markup={markup} />);   res.send('<!DOCTYPE html>' + html);}\n// src/client.jsimport React from 'react';import ReactDOM from 'react-dom';import { CookiesProvider } from 'react-cookie'; import App from './components/App'; const appEl = document.getElementById('main-app'); ReactDOM.render(  <CookiesProvider>    <App />  </CookiesProvider>,  appEl);\n// server.jsrequire('@babel/register'); const express = require('express');const serverMiddleware = require('./src/server').default;const cookiesMiddleware = require('universal-cookie-express'); const app = express(); app  .use('/assets', express.static('dist'))  .use(cookiesMiddleware())  .use(serverMiddleware); app.listen(8080, function() {  console.log('Listening on 8080...');});\nKeywordsuniversalisomophiccookiereactInstallnpm i react-cookieDownloadsWeekly Downloads174,284Version4.0.3LicenseMITUnpacked Size96 kBTotal Files48Homepagegithub.com/reactivestack/cookies/tree/master/packages/react-cookie/#readmeRepositoryGitgithub.com/reactivestack/cookiesLast publish8 months agoCollaboratorsTry on RunKitReport a vulnerability Learn about our RFC process, Open RFC meetings & more.Join in the discussion! » Learn about our RFC process, Open RFC meetings & more.Join in the discussion! » Learn about our RFC process, Open RFC meetings & more.Join in the discussion! » Learn about our RFC process, Open RFC meetings & more. Join in the discussion! » Join in the discussion! » react-cookie4.0.3 • Public • Published 8 months ago Readme ExploreBETA3Dependencies334Dependents64Versions Hello {cookies.name}!\nreact-cookie\n\n\n  Universal cookies for React\n  \n\n\n\n\nIntegrations\n\nuniversal-cookie - Universal cookies for JavaScript\nuniversal-cookie-express - Hook cookies get/set on Express for server-rendering\n\nMinimum requirement\nreact-cookie @ v3.0+\n\nReact.js >= 16.3.0 (new context API + forward ref)\n\nreact-cookie @ v0.0-v2.2\n\nReact.js >= 15\n\nGetting started\nnpm install react-cookie\nor in the browser (global variable ReactCookie):\n<script  crossorigin  src=\"https://unpkg.com/react@16/umd/react.production.js\"></script> <script  crossorigin  src=\"https://unpkg.com/universal-cookie@3/umd/universalCookie.min.js\"></script> <script  crossorigin  src=\"https://unpkg.com/react-cookie@3/umd/reactCookie.min.js\"></script> \n<CookiesProvider />\nSet the user cookies\nOn the server, the cookies props must be set using req.universalCookies or new Cookie(cookieHeader)\nuseCookies([dependencies])\nAccess and modify cookies using React hooks.\nconst [cookies, setCookie, removeCookie] = useCookies(['cookie-name']);\nReact hooks are available starting from React 16.8\ndependencies (optional)\nLet you optionally specify a list of cookie names your component depend on or that should trigger a re-render. If unspecified, it will render on every cookie change.\ncookies\nJavascript object with all your cookies. The key is the cookie name.\nsetCookie(name, value, [options])\nSet a cookie value\n\nname (string): cookie name\nvalue (string|object): save the value and stringify the object if needed\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nremoveCookie(name, [options])\nRemove a cookie\n\nname (string): cookie name\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nwithCookies(Component)\nGive access to your cookies anywhere. Add the following props to your component:\n\ncookies: Cookies instance allowing you to get, set and remove cookies.\nallCookies: All your current cookies in an object.\n\nYour original static properties will be hoisted on the returned component. You can also access the original component by using the WrappedComponent static property. Example:\nfunction MyComponent() {  return null;}const NewComponent = withCookies(MyComponent);NewComponent.WrappedComponent === MyComponent;\nCookies\nget(name, [options])\nGet a cookie value\n\nname (string): cookie name\noptions (object):\n\ndoNotParse (boolean): do not convert the cookie into an object no matter what\n\n\n\ngetAll([options])\nGet all cookies\n\noptions (object):\n\ndoNotParse (boolean): do not convert the cookie into an object no matter what\n\n\n\nset(name, value, [options])\nSet a cookie value\n\nname (string): cookie name\nvalue (string|object): save the value and stringify the object if needed\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nremove(name, [options])\nRemove a cookie\n\nname (string): cookie name\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nSimple Example with React hooks\n// Root.jsximport React from 'react';import App from './App';import { CookiesProvider } from 'react-cookie'; export default function Root() {  return (    <CookiesProvider>      <App />    </CookiesProvider>  );}\n// App.jsximport React from 'react';import { useCookies } from 'react-cookie'; import NameForm from './NameForm'; function App() {  const [cookies, setCookie] = useCookies(['name']);   function onChange(newName) {    setCookie('name', newName, { path: '/' });  }   return (    <div>      <NameForm name={cookies.name} onChange={onChange} />      {cookies.name && <h1>Hello {cookies.name}!</h1>}    </div>  );} export default App;\nSimple Example with Higher-Order Component\n// Root.jsximport React from 'react';import App from './App';import { CookiesProvider } from 'react-cookie'; export default function Root() {  return (    <CookiesProvider>      <App />    </CookiesProvider>  );}\n// App.jsximport React, { Component } from 'react';import { instanceOf } from 'prop-types';import { withCookies, Cookies } from 'react-cookie'; import NameForm from './NameForm'; class App extends Component {  static propTypes = {    cookies: instanceOf(Cookies).isRequired  };   constructor(props) {    super(props);     const { cookies } = props;    this.state = {      name: cookies.get('name') || 'Ben'    };  }   handleNameChange(name) {    const { cookies } = this.props;     cookies.set('name', name, { path: '/' });    this.setState({ name });  }   render() {    const { name } = this.state;     return (      <div>        <NameForm name={name} onChange={this.handleNameChange.bind(this)} />        {this.state.name && <h1>Hello {this.state.name}!</h1>}      </div>    );  }} export default withCookies(App);\nServer-Rendering Example\n// src/components/App.jsimport React from 'react';import { useCookies } from 'react-cookie'; import NameForm from './NameForm'; function App() {  const [cookies, setCookie] = useCookies(['name']);   function onChange(newName) {    setCookie('name', newName, { path: '/' });  }   return (    <div>      <NameForm name={cookies.name} onChange={onChange} />      {cookies.name && <h1>Hello {cookies.name}!</h1>}    </div>  );} export default App;\n// src/server.jsimport React from 'react';import ReactDOMServer from 'react-dom/server';import { CookiesProvider } from 'react-cookie'; import Html from './components/Html';import App from './components/App'; export default function middleware(req, res) {  const markup = ReactDOMServer.renderToString(    <CookiesProvider cookies={req.universalCookies}>      <App />    </CookiesProvider>  );   const html = ReactDOMServer.renderToStaticMarkup(<Html markup={markup} />);   res.send('<!DOCTYPE html>' + html);}\n// src/client.jsimport React from 'react';import ReactDOM from 'react-dom';import { CookiesProvider } from 'react-cookie'; import App from './components/App'; const appEl = document.getElementById('main-app'); ReactDOM.render(  <CookiesProvider>    <App />  </CookiesProvider>,  appEl);\n// server.jsrequire('@babel/register'); const express = require('express');const serverMiddleware = require('./src/server').default;const cookiesMiddleware = require('universal-cookie-express'); const app = express(); app  .use('/assets', express.static('dist'))  .use(cookiesMiddleware())  .use(serverMiddleware); app.listen(8080, function() {  console.log('Listening on 8080...');});\nKeywordsuniversalisomophiccookiereactInstallnpm i react-cookieDownloadsWeekly Downloads174,284Version4.0.3LicenseMITUnpacked Size96 kBTotal Files48Homepagegithub.com/reactivestack/cookies/tree/master/packages/react-cookie/#readmeRepositoryGitgithub.com/reactivestack/cookiesLast publish8 months agoCollaboratorsTry on RunKitReport a vulnerability react-cookie4.0.3 • Public • Published 8 months ago react-cookie react-cookie 4.0.3 •  Public  • Published 8 months ago 8 months ago  Readme ExploreBETA3Dependencies334Dependents64Versions  Readme  Readme  Readme    ExploreBETA  ExploreBETA  ExploreBETA  Explore   BETA 3Dependencies 3Dependencies 3Dependencies   3 334Dependents 334Dependents 334Dependents   334 64Versions 64Versions 64Versions   64  Hello {cookies.name}!\nreact-cookie\n\n\n  Universal cookies for React\n  \n\n\n\n\nIntegrations\n\nuniversal-cookie - Universal cookies for JavaScript\nuniversal-cookie-express - Hook cookies get/set on Express for server-rendering\n\nMinimum requirement\nreact-cookie @ v3.0+\n\nReact.js >= 16.3.0 (new context API + forward ref)\n\nreact-cookie @ v0.0-v2.2\n\nReact.js >= 15\n\nGetting started\nnpm install react-cookie\nor in the browser (global variable ReactCookie):\n<script  crossorigin  src=\"https://unpkg.com/react@16/umd/react.production.js\"></script> <script  crossorigin  src=\"https://unpkg.com/universal-cookie@3/umd/universalCookie.min.js\"></script> <script  crossorigin  src=\"https://unpkg.com/react-cookie@3/umd/reactCookie.min.js\"></script> \n<CookiesProvider />\nSet the user cookies\nOn the server, the cookies props must be set using req.universalCookies or new Cookie(cookieHeader)\nuseCookies([dependencies])\nAccess and modify cookies using React hooks.\nconst [cookies, setCookie, removeCookie] = useCookies(['cookie-name']);\nReact hooks are available starting from React 16.8\ndependencies (optional)\nLet you optionally specify a list of cookie names your component depend on or that should trigger a re-render. If unspecified, it will render on every cookie change.\ncookies\nJavascript object with all your cookies. The key is the cookie name.\nsetCookie(name, value, [options])\nSet a cookie value\n\nname (string): cookie name\nvalue (string|object): save the value and stringify the object if needed\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nremoveCookie(name, [options])\nRemove a cookie\n\nname (string): cookie name\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nwithCookies(Component)\nGive access to your cookies anywhere. Add the following props to your component:\n\ncookies: Cookies instance allowing you to get, set and remove cookies.\nallCookies: All your current cookies in an object.\n\nYour original static properties will be hoisted on the returned component. You can also access the original component by using the WrappedComponent static property. Example:\nfunction MyComponent() {  return null;}const NewComponent = withCookies(MyComponent);NewComponent.WrappedComponent === MyComponent;\nCookies\nget(name, [options])\nGet a cookie value\n\nname (string): cookie name\noptions (object):\n\ndoNotParse (boolean): do not convert the cookie into an object no matter what\n\n\n\ngetAll([options])\nGet all cookies\n\noptions (object):\n\ndoNotParse (boolean): do not convert the cookie into an object no matter what\n\n\n\nset(name, value, [options])\nSet a cookie value\n\nname (string): cookie name\nvalue (string|object): save the value and stringify the object if needed\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nremove(name, [options])\nRemove a cookie\n\nname (string): cookie name\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nSimple Example with React hooks\n// Root.jsximport React from 'react';import App from './App';import { CookiesProvider } from 'react-cookie'; export default function Root() {  return (    <CookiesProvider>      <App />    </CookiesProvider>  );}\n// App.jsximport React from 'react';import { useCookies } from 'react-cookie'; import NameForm from './NameForm'; function App() {  const [cookies, setCookie] = useCookies(['name']);   function onChange(newName) {    setCookie('name', newName, { path: '/' });  }   return (    <div>      <NameForm name={cookies.name} onChange={onChange} />      {cookies.name && <h1>Hello {cookies.name}!</h1>}    </div>  );} export default App;\nSimple Example with Higher-Order Component\n// Root.jsximport React from 'react';import App from './App';import { CookiesProvider } from 'react-cookie'; export default function Root() {  return (    <CookiesProvider>      <App />    </CookiesProvider>  );}\n// App.jsximport React, { Component } from 'react';import { instanceOf } from 'prop-types';import { withCookies, Cookies } from 'react-cookie'; import NameForm from './NameForm'; class App extends Component {  static propTypes = {    cookies: instanceOf(Cookies).isRequired  };   constructor(props) {    super(props);     const { cookies } = props;    this.state = {      name: cookies.get('name') || 'Ben'    };  }   handleNameChange(name) {    const { cookies } = this.props;     cookies.set('name', name, { path: '/' });    this.setState({ name });  }   render() {    const { name } = this.state;     return (      <div>        <NameForm name={name} onChange={this.handleNameChange.bind(this)} />        {this.state.name && <h1>Hello {this.state.name}!</h1>}      </div>    );  }} export default withCookies(App);\nServer-Rendering Example\n// src/components/App.jsimport React from 'react';import { useCookies } from 'react-cookie'; import NameForm from './NameForm'; function App() {  const [cookies, setCookie] = useCookies(['name']);   function onChange(newName) {    setCookie('name', newName, { path: '/' });  }   return (    <div>      <NameForm name={cookies.name} onChange={onChange} />      {cookies.name && <h1>Hello {cookies.name}!</h1>}    </div>  );} export default App;\n// src/server.jsimport React from 'react';import ReactDOMServer from 'react-dom/server';import { CookiesProvider } from 'react-cookie'; import Html from './components/Html';import App from './components/App'; export default function middleware(req, res) {  const markup = ReactDOMServer.renderToString(    <CookiesProvider cookies={req.universalCookies}>      <App />    </CookiesProvider>  );   const html = ReactDOMServer.renderToStaticMarkup(<Html markup={markup} />);   res.send('<!DOCTYPE html>' + html);}\n// src/client.jsimport React from 'react';import ReactDOM from 'react-dom';import { CookiesProvider } from 'react-cookie'; import App from './components/App'; const appEl = document.getElementById('main-app'); ReactDOM.render(  <CookiesProvider>    <App />  </CookiesProvider>,  appEl);\n// server.jsrequire('@babel/register'); const express = require('express');const serverMiddleware = require('./src/server').default;const cookiesMiddleware = require('universal-cookie-express'); const app = express(); app  .use('/assets', express.static('dist'))  .use(cookiesMiddleware())  .use(serverMiddleware); app.listen(8080, function() {  console.log('Listening on 8080...');});\nKeywordsuniversalisomophiccookiereact  Hello {cookies.name}!\nreact-cookie\n\n\n  Universal cookies for React\n  \n\n\n\n\nIntegrations\n\nuniversal-cookie - Universal cookies for JavaScript\nuniversal-cookie-express - Hook cookies get/set on Express for server-rendering\n\nMinimum requirement\nreact-cookie @ v3.0+\n\nReact.js >= 16.3.0 (new context API + forward ref)\n\nreact-cookie @ v0.0-v2.2\n\nReact.js >= 15\n\nGetting started\nnpm install react-cookie\nor in the browser (global variable ReactCookie):\n<script  crossorigin  src=\"https://unpkg.com/react@16/umd/react.production.js\"></script> <script  crossorigin  src=\"https://unpkg.com/universal-cookie@3/umd/universalCookie.min.js\"></script> <script  crossorigin  src=\"https://unpkg.com/react-cookie@3/umd/reactCookie.min.js\"></script> \n<CookiesProvider />\nSet the user cookies\nOn the server, the cookies props must be set using req.universalCookies or new Cookie(cookieHeader)\nuseCookies([dependencies])\nAccess and modify cookies using React hooks.\nconst [cookies, setCookie, removeCookie] = useCookies(['cookie-name']);\nReact hooks are available starting from React 16.8\ndependencies (optional)\nLet you optionally specify a list of cookie names your component depend on or that should trigger a re-render. If unspecified, it will render on every cookie change.\ncookies\nJavascript object with all your cookies. The key is the cookie name.\nsetCookie(name, value, [options])\nSet a cookie value\n\nname (string): cookie name\nvalue (string|object): save the value and stringify the object if needed\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nremoveCookie(name, [options])\nRemove a cookie\n\nname (string): cookie name\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nwithCookies(Component)\nGive access to your cookies anywhere. Add the following props to your component:\n\ncookies: Cookies instance allowing you to get, set and remove cookies.\nallCookies: All your current cookies in an object.\n\nYour original static properties will be hoisted on the returned component. You can also access the original component by using the WrappedComponent static property. Example:\nfunction MyComponent() {  return null;}const NewComponent = withCookies(MyComponent);NewComponent.WrappedComponent === MyComponent;\nCookies\nget(name, [options])\nGet a cookie value\n\nname (string): cookie name\noptions (object):\n\ndoNotParse (boolean): do not convert the cookie into an object no matter what\n\n\n\ngetAll([options])\nGet all cookies\n\noptions (object):\n\ndoNotParse (boolean): do not convert the cookie into an object no matter what\n\n\n\nset(name, value, [options])\nSet a cookie value\n\nname (string): cookie name\nvalue (string|object): save the value and stringify the object if needed\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nremove(name, [options])\nRemove a cookie\n\nname (string): cookie name\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nSimple Example with React hooks\n// Root.jsximport React from 'react';import App from './App';import { CookiesProvider } from 'react-cookie'; export default function Root() {  return (    <CookiesProvider>      <App />    </CookiesProvider>  );}\n// App.jsximport React from 'react';import { useCookies } from 'react-cookie'; import NameForm from './NameForm'; function App() {  const [cookies, setCookie] = useCookies(['name']);   function onChange(newName) {    setCookie('name', newName, { path: '/' });  }   return (    <div>      <NameForm name={cookies.name} onChange={onChange} />      {cookies.name && <h1>Hello {cookies.name}!</h1>}    </div>  );} export default App;\nSimple Example with Higher-Order Component\n// Root.jsximport React from 'react';import App from './App';import { CookiesProvider } from 'react-cookie'; export default function Root() {  return (    <CookiesProvider>      <App />    </CookiesProvider>  );}\n// App.jsximport React, { Component } from 'react';import { instanceOf } from 'prop-types';import { withCookies, Cookies } from 'react-cookie'; import NameForm from './NameForm'; class App extends Component {  static propTypes = {    cookies: instanceOf(Cookies).isRequired  };   constructor(props) {    super(props);     const { cookies } = props;    this.state = {      name: cookies.get('name') || 'Ben'    };  }   handleNameChange(name) {    const { cookies } = this.props;     cookies.set('name', name, { path: '/' });    this.setState({ name });  }   render() {    const { name } = this.state;     return (      <div>        <NameForm name={name} onChange={this.handleNameChange.bind(this)} />        {this.state.name && <h1>Hello {this.state.name}!</h1>}      </div>    );  }} export default withCookies(App);\nServer-Rendering Example\n// src/components/App.jsimport React from 'react';import { useCookies } from 'react-cookie'; import NameForm from './NameForm'; function App() {  const [cookies, setCookie] = useCookies(['name']);   function onChange(newName) {    setCookie('name', newName, { path: '/' });  }   return (    <div>      <NameForm name={cookies.name} onChange={onChange} />      {cookies.name && <h1>Hello {cookies.name}!</h1>}    </div>  );} export default App;\n// src/server.jsimport React from 'react';import ReactDOMServer from 'react-dom/server';import { CookiesProvider } from 'react-cookie'; import Html from './components/Html';import App from './components/App'; export default function middleware(req, res) {  const markup = ReactDOMServer.renderToString(    <CookiesProvider cookies={req.universalCookies}>      <App />    </CookiesProvider>  );   const html = ReactDOMServer.renderToStaticMarkup(<Html markup={markup} />);   res.send('<!DOCTYPE html>' + html);}\n// src/client.jsimport React from 'react';import ReactDOM from 'react-dom';import { CookiesProvider } from 'react-cookie'; import App from './components/App'; const appEl = document.getElementById('main-app'); ReactDOM.render(  <CookiesProvider>    <App />  </CookiesProvider>,  appEl);\n// server.jsrequire('@babel/register'); const express = require('express');const serverMiddleware = require('./src/server').default;const cookiesMiddleware = require('universal-cookie-express'); const app = express(); app  .use('/assets', express.static('dist'))  .use(cookiesMiddleware())  .use(serverMiddleware); app.listen(8080, function() {  console.log('Listening on 8080...');});\nKeywordsuniversalisomophiccookiereact  Hello {cookies.name}!\nreact-cookie\n\n\n  Universal cookies for React\n  \n\n\n\n\nIntegrations\n\nuniversal-cookie - Universal cookies for JavaScript\nuniversal-cookie-express - Hook cookies get/set on Express for server-rendering\n\nMinimum requirement\nreact-cookie @ v3.0+\n\nReact.js >= 16.3.0 (new context API + forward ref)\n\nreact-cookie @ v0.0-v2.2\n\nReact.js >= 15\n\nGetting started\nnpm install react-cookie\nor in the browser (global variable ReactCookie):\n<script  crossorigin  src=\"https://unpkg.com/react@16/umd/react.production.js\"></script> <script  crossorigin  src=\"https://unpkg.com/universal-cookie@3/umd/universalCookie.min.js\"></script> <script  crossorigin  src=\"https://unpkg.com/react-cookie@3/umd/reactCookie.min.js\"></script> \n<CookiesProvider />\nSet the user cookies\nOn the server, the cookies props must be set using req.universalCookies or new Cookie(cookieHeader)\nuseCookies([dependencies])\nAccess and modify cookies using React hooks.\nconst [cookies, setCookie, removeCookie] = useCookies(['cookie-name']);\nReact hooks are available starting from React 16.8\ndependencies (optional)\nLet you optionally specify a list of cookie names your component depend on or that should trigger a re-render. If unspecified, it will render on every cookie change.\ncookies\nJavascript object with all your cookies. The key is the cookie name.\nsetCookie(name, value, [options])\nSet a cookie value\n\nname (string): cookie name\nvalue (string|object): save the value and stringify the object if needed\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nremoveCookie(name, [options])\nRemove a cookie\n\nname (string): cookie name\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nwithCookies(Component)\nGive access to your cookies anywhere. Add the following props to your component:\n\ncookies: Cookies instance allowing you to get, set and remove cookies.\nallCookies: All your current cookies in an object.\n\nYour original static properties will be hoisted on the returned component. You can also access the original component by using the WrappedComponent static property. Example:\nfunction MyComponent() {  return null;}const NewComponent = withCookies(MyComponent);NewComponent.WrappedComponent === MyComponent;\nCookies\nget(name, [options])\nGet a cookie value\n\nname (string): cookie name\noptions (object):\n\ndoNotParse (boolean): do not convert the cookie into an object no matter what\n\n\n\ngetAll([options])\nGet all cookies\n\noptions (object):\n\ndoNotParse (boolean): do not convert the cookie into an object no matter what\n\n\n\nset(name, value, [options])\nSet a cookie value\n\nname (string): cookie name\nvalue (string|object): save the value and stringify the object if needed\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nremove(name, [options])\nRemove a cookie\n\nname (string): cookie name\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nSimple Example with React hooks\n// Root.jsximport React from 'react';import App from './App';import { CookiesProvider } from 'react-cookie'; export default function Root() {  return (    <CookiesProvider>      <App />    </CookiesProvider>  );}\n// App.jsximport React from 'react';import { useCookies } from 'react-cookie'; import NameForm from './NameForm'; function App() {  const [cookies, setCookie] = useCookies(['name']);   function onChange(newName) {    setCookie('name', newName, { path: '/' });  }   return (    <div>      <NameForm name={cookies.name} onChange={onChange} />      {cookies.name && <h1>Hello {cookies.name}!</h1>}    </div>  );} export default App;\nSimple Example with Higher-Order Component\n// Root.jsximport React from 'react';import App from './App';import { CookiesProvider } from 'react-cookie'; export default function Root() {  return (    <CookiesProvider>      <App />    </CookiesProvider>  );}\n// App.jsximport React, { Component } from 'react';import { instanceOf } from 'prop-types';import { withCookies, Cookies } from 'react-cookie'; import NameForm from './NameForm'; class App extends Component {  static propTypes = {    cookies: instanceOf(Cookies).isRequired  };   constructor(props) {    super(props);     const { cookies } = props;    this.state = {      name: cookies.get('name') || 'Ben'    };  }   handleNameChange(name) {    const { cookies } = this.props;     cookies.set('name', name, { path: '/' });    this.setState({ name });  }   render() {    const { name } = this.state;     return (      <div>        <NameForm name={name} onChange={this.handleNameChange.bind(this)} />        {this.state.name && <h1>Hello {this.state.name}!</h1>}      </div>    );  }} export default withCookies(App);\nServer-Rendering Example\n// src/components/App.jsimport React from 'react';import { useCookies } from 'react-cookie'; import NameForm from './NameForm'; function App() {  const [cookies, setCookie] = useCookies(['name']);   function onChange(newName) {    setCookie('name', newName, { path: '/' });  }   return (    <div>      <NameForm name={cookies.name} onChange={onChange} />      {cookies.name && <h1>Hello {cookies.name}!</h1>}    </div>  );} export default App;\n// src/server.jsimport React from 'react';import ReactDOMServer from 'react-dom/server';import { CookiesProvider } from 'react-cookie'; import Html from './components/Html';import App from './components/App'; export default function middleware(req, res) {  const markup = ReactDOMServer.renderToString(    <CookiesProvider cookies={req.universalCookies}>      <App />    </CookiesProvider>  );   const html = ReactDOMServer.renderToStaticMarkup(<Html markup={markup} />);   res.send('<!DOCTYPE html>' + html);}\n// src/client.jsimport React from 'react';import ReactDOM from 'react-dom';import { CookiesProvider } from 'react-cookie'; import App from './components/App'; const appEl = document.getElementById('main-app'); ReactDOM.render(  <CookiesProvider>    <App />  </CookiesProvider>,  appEl);\n// server.jsrequire('@babel/register'); const express = require('express');const serverMiddleware = require('./src/server').default;const cookiesMiddleware = require('universal-cookie-express'); const app = express(); app  .use('/assets', express.static('dist'))  .use(cookiesMiddleware())  .use(serverMiddleware); app.listen(8080, function() {  console.log('Listening on 8080...');});\n  Hello {cookies.name}!\nreact-cookie\n\n\n  Universal cookies for React\n  \n\n\n\n\nIntegrations\n\nuniversal-cookie - Universal cookies for JavaScript\nuniversal-cookie-express - Hook cookies get/set on Express for server-rendering\n\nMinimum requirement\nreact-cookie @ v3.0+\n\nReact.js >= 16.3.0 (new context API + forward ref)\n\nreact-cookie @ v0.0-v2.2\n\nReact.js >= 15\n\nGetting started\nnpm install react-cookie\nor in the browser (global variable ReactCookie):\n<script  crossorigin  src=\"https://unpkg.com/react@16/umd/react.production.js\"></script> <script  crossorigin  src=\"https://unpkg.com/universal-cookie@3/umd/universalCookie.min.js\"></script> <script  crossorigin  src=\"https://unpkg.com/react-cookie@3/umd/reactCookie.min.js\"></script> \n<CookiesProvider />\nSet the user cookies\nOn the server, the cookies props must be set using req.universalCookies or new Cookie(cookieHeader)\nuseCookies([dependencies])\nAccess and modify cookies using React hooks.\nconst [cookies, setCookie, removeCookie] = useCookies(['cookie-name']);\nReact hooks are available starting from React 16.8\ndependencies (optional)\nLet you optionally specify a list of cookie names your component depend on or that should trigger a re-render. If unspecified, it will render on every cookie change.\ncookies\nJavascript object with all your cookies. The key is the cookie name.\nsetCookie(name, value, [options])\nSet a cookie value\n\nname (string): cookie name\nvalue (string|object): save the value and stringify the object if needed\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nremoveCookie(name, [options])\nRemove a cookie\n\nname (string): cookie name\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nwithCookies(Component)\nGive access to your cookies anywhere. Add the following props to your component:\n\ncookies: Cookies instance allowing you to get, set and remove cookies.\nallCookies: All your current cookies in an object.\n\nYour original static properties will be hoisted on the returned component. You can also access the original component by using the WrappedComponent static property. Example:\nfunction MyComponent() {  return null;}const NewComponent = withCookies(MyComponent);NewComponent.WrappedComponent === MyComponent;\nCookies\nget(name, [options])\nGet a cookie value\n\nname (string): cookie name\noptions (object):\n\ndoNotParse (boolean): do not convert the cookie into an object no matter what\n\n\n\ngetAll([options])\nGet all cookies\n\noptions (object):\n\ndoNotParse (boolean): do not convert the cookie into an object no matter what\n\n\n\nset(name, value, [options])\nSet a cookie value\n\nname (string): cookie name\nvalue (string|object): save the value and stringify the object if needed\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nremove(name, [options])\nRemove a cookie\n\nname (string): cookie name\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nSimple Example with React hooks\n// Root.jsximport React from 'react';import App from './App';import { CookiesProvider } from 'react-cookie'; export default function Root() {  return (    <CookiesProvider>      <App />    </CookiesProvider>  );}\n// App.jsximport React from 'react';import { useCookies } from 'react-cookie'; import NameForm from './NameForm'; function App() {  const [cookies, setCookie] = useCookies(['name']);   function onChange(newName) {    setCookie('name', newName, { path: '/' });  }   return (    <div>      <NameForm name={cookies.name} onChange={onChange} />      {cookies.name && <h1>Hello {cookies.name}!</h1>}    </div>  );} export default App;\nSimple Example with Higher-Order Component\n// Root.jsximport React from 'react';import App from './App';import { CookiesProvider } from 'react-cookie'; export default function Root() {  return (    <CookiesProvider>      <App />    </CookiesProvider>  );}\n// App.jsximport React, { Component } from 'react';import { instanceOf } from 'prop-types';import { withCookies, Cookies } from 'react-cookie'; import NameForm from './NameForm'; class App extends Component {  static propTypes = {    cookies: instanceOf(Cookies).isRequired  };   constructor(props) {    super(props);     const { cookies } = props;    this.state = {      name: cookies.get('name') || 'Ben'    };  }   handleNameChange(name) {    const { cookies } = this.props;     cookies.set('name', name, { path: '/' });    this.setState({ name });  }   render() {    const { name } = this.state;     return (      <div>        <NameForm name={name} onChange={this.handleNameChange.bind(this)} />        {this.state.name && <h1>Hello {this.state.name}!</h1>}      </div>    );  }} export default withCookies(App);\nServer-Rendering Example\n// src/components/App.jsimport React from 'react';import { useCookies } from 'react-cookie'; import NameForm from './NameForm'; function App() {  const [cookies, setCookie] = useCookies(['name']);   function onChange(newName) {    setCookie('name', newName, { path: '/' });  }   return (    <div>      <NameForm name={cookies.name} onChange={onChange} />      {cookies.name && <h1>Hello {cookies.name}!</h1>}    </div>  );} export default App;\n// src/server.jsimport React from 'react';import ReactDOMServer from 'react-dom/server';import { CookiesProvider } from 'react-cookie'; import Html from './components/Html';import App from './components/App'; export default function middleware(req, res) {  const markup = ReactDOMServer.renderToString(    <CookiesProvider cookies={req.universalCookies}>      <App />    </CookiesProvider>  );   const html = ReactDOMServer.renderToStaticMarkup(<Html markup={markup} />);   res.send('<!DOCTYPE html>' + html);}\n// src/client.jsimport React from 'react';import ReactDOM from 'react-dom';import { CookiesProvider } from 'react-cookie'; import App from './components/App'; const appEl = document.getElementById('main-app'); ReactDOM.render(  <CookiesProvider>    <App />  </CookiesProvider>,  appEl);\n// server.jsrequire('@babel/register'); const express = require('express');const serverMiddleware = require('./src/server').default;const cookiesMiddleware = require('universal-cookie-express'); const app = express(); app  .use('/assets', express.static('dist'))  .use(cookiesMiddleware())  .use(serverMiddleware); app.listen(8080, function() {  console.log('Listening on 8080...');});\n Hello {cookies.name}!\nreact-cookie\n\n\n  Universal cookies for React\n  \n\n\n\n\nIntegrations\n\nuniversal-cookie - Universal cookies for JavaScript\nuniversal-cookie-express - Hook cookies get/set on Express for server-rendering\n\nMinimum requirement\nreact-cookie @ v3.0+\n\nReact.js >= 16.3.0 (new context API + forward ref)\n\nreact-cookie @ v0.0-v2.2\n\nReact.js >= 15\n\nGetting started\nnpm install react-cookie\nor in the browser (global variable ReactCookie):\n<script  crossorigin  src=\"https://unpkg.com/react@16/umd/react.production.js\"></script> <script  crossorigin  src=\"https://unpkg.com/universal-cookie@3/umd/universalCookie.min.js\"></script> <script  crossorigin  src=\"https://unpkg.com/react-cookie@3/umd/reactCookie.min.js\"></script> \n<CookiesProvider />\nSet the user cookies\nOn the server, the cookies props must be set using req.universalCookies or new Cookie(cookieHeader)\nuseCookies([dependencies])\nAccess and modify cookies using React hooks.\nconst [cookies, setCookie, removeCookie] = useCookies(['cookie-name']);\nReact hooks are available starting from React 16.8\ndependencies (optional)\nLet you optionally specify a list of cookie names your component depend on or that should trigger a re-render. If unspecified, it will render on every cookie change.\ncookies\nJavascript object with all your cookies. The key is the cookie name.\nsetCookie(name, value, [options])\nSet a cookie value\n\nname (string): cookie name\nvalue (string|object): save the value and stringify the object if needed\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nremoveCookie(name, [options])\nRemove a cookie\n\nname (string): cookie name\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nwithCookies(Component)\nGive access to your cookies anywhere. Add the following props to your component:\n\ncookies: Cookies instance allowing you to get, set and remove cookies.\nallCookies: All your current cookies in an object.\n\nYour original static properties will be hoisted on the returned component. You can also access the original component by using the WrappedComponent static property. Example:\nfunction MyComponent() {  return null;}const NewComponent = withCookies(MyComponent);NewComponent.WrappedComponent === MyComponent;\nCookies\nget(name, [options])\nGet a cookie value\n\nname (string): cookie name\noptions (object):\n\ndoNotParse (boolean): do not convert the cookie into an object no matter what\n\n\n\ngetAll([options])\nGet all cookies\n\noptions (object):\n\ndoNotParse (boolean): do not convert the cookie into an object no matter what\n\n\n\nset(name, value, [options])\nSet a cookie value\n\nname (string): cookie name\nvalue (string|object): save the value and stringify the object if needed\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nremove(name, [options])\nRemove a cookie\n\nname (string): cookie name\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n\nSimple Example with React hooks\n// Root.jsximport React from 'react';import App from './App';import { CookiesProvider } from 'react-cookie'; export default function Root() {  return (    <CookiesProvider>      <App />    </CookiesProvider>  );}\n// App.jsximport React from 'react';import { useCookies } from 'react-cookie'; import NameForm from './NameForm'; function App() {  const [cookies, setCookie] = useCookies(['name']);   function onChange(newName) {    setCookie('name', newName, { path: '/' });  }   return (    <div>      <NameForm name={cookies.name} onChange={onChange} />      {cookies.name && <h1>Hello {cookies.name}!</h1>}    </div>  );} export default App;\nSimple Example with Higher-Order Component\n// Root.jsximport React from 'react';import App from './App';import { CookiesProvider } from 'react-cookie'; export default function Root() {  return (    <CookiesProvider>      <App />    </CookiesProvider>  );}\n// App.jsximport React, { Component } from 'react';import { instanceOf } from 'prop-types';import { withCookies, Cookies } from 'react-cookie'; import NameForm from './NameForm'; class App extends Component {  static propTypes = {    cookies: instanceOf(Cookies).isRequired  };   constructor(props) {    super(props);     const { cookies } = props;    this.state = {      name: cookies.get('name') || 'Ben'    };  }   handleNameChange(name) {    const { cookies } = this.props;     cookies.set('name', name, { path: '/' });    this.setState({ name });  }   render() {    const { name } = this.state;     return (      <div>        <NameForm name={name} onChange={this.handleNameChange.bind(this)} />        {this.state.name && <h1>Hello {this.state.name}!</h1>}      </div>    );  }} export default withCookies(App);\nServer-Rendering Example\n// src/components/App.jsimport React from 'react';import { useCookies } from 'react-cookie'; import NameForm from './NameForm'; function App() {  const [cookies, setCookie] = useCookies(['name']);   function onChange(newName) {    setCookie('name', newName, { path: '/' });  }   return (    <div>      <NameForm name={cookies.name} onChange={onChange} />      {cookies.name && <h1>Hello {cookies.name}!</h1>}    </div>  );} export default App;\n// src/server.jsimport React from 'react';import ReactDOMServer from 'react-dom/server';import { CookiesProvider } from 'react-cookie'; import Html from './components/Html';import App from './components/App'; export default function middleware(req, res) {  const markup = ReactDOMServer.renderToString(    <CookiesProvider cookies={req.universalCookies}>      <App />    </CookiesProvider>  );   const html = ReactDOMServer.renderToStaticMarkup(<Html markup={markup} />);   res.send('<!DOCTYPE html>' + html);}\n// src/client.jsimport React from 'react';import ReactDOM from 'react-dom';import { CookiesProvider } from 'react-cookie'; import App from './components/App'; const appEl = document.getElementById('main-app'); ReactDOM.render(  <CookiesProvider>    <App />  </CookiesProvider>,  appEl);\n// server.jsrequire('@babel/register'); const express = require('express');const serverMiddleware = require('./src/server').default;const cookiesMiddleware = require('universal-cookie-express'); const app = express(); app  .use('/assets', express.static('dist'))  .use(cookiesMiddleware())  .use(serverMiddleware); app.listen(8080, function() {  console.log('Listening on 8080...');});\n Hello {cookies.name}!    react-cookie react-cookie \n  Universal cookies for React\n  \n React    \n\n      Integrations    \nuniversal-cookie - Universal cookies for JavaScript\nuniversal-cookie-express - Hook cookies get/set on Express for server-rendering\n universal-cookie - Universal cookies for JavaScript universal-cookie universal-cookie universal-cookie-express - Hook cookies get/set on Express for server-rendering universal-cookie-express universal-cookie-express Minimum requirement    react-cookie @ v3.0+    \nReact.js >= 16.3.0 (new context API + forward ref)\n React.js >= 16.3.0 (new context API + forward ref) react-cookie @ v0.0-v2.2    \nReact.js >= 15\n React.js >= 15 Getting started    npm install react-cookie npm install react-cookie or in the browser (global variable ReactCookie): ReactCookie <script  crossorigin  src=\"https://unpkg.com/react@16/umd/react.production.js\"></script> <script  crossorigin  src=\"https://unpkg.com/universal-cookie@3/umd/universalCookie.min.js\"></script> <script  crossorigin  src=\"https://unpkg.com/react-cookie@3/umd/reactCookie.min.js\"></script>  <script  crossorigin  src=\"https://unpkg.com/react@16/umd/react.production.js\"></script> <script  crossorigin  src=\"https://unpkg.com/universal-cookie@3/umd/universalCookie.min.js\"></script> <script  crossorigin  src=\"https://unpkg.com/react-cookie@3/umd/reactCookie.min.js\"></script>  <script <script <script < < script script   crossorigin   crossorigin   crossorigin    crossorigin crossorigin   src=\"https://unpkg.com/react@16/umd/react.production.js\"   src=\"https://unpkg.com/react@16/umd/react.production.js\"   src=\"https://unpkg.com/react@16/umd/react.production.js\"    src src = \"https://unpkg.com/react@16/umd/react.production.js\" \" \" https://unpkg.com/react@16/umd/react.production.js https://unpkg.com/react@16/umd/react.production.js \" \" ></script>  ></script>  ></script>  ></ > </ script script > >   <script <script <script < < script script   crossorigin   crossorigin   crossorigin    crossorigin crossorigin   src=\"https://unpkg.com/universal-cookie@3/umd/universalCookie.min.js\"   src=\"https://unpkg.com/universal-cookie@3/umd/universalCookie.min.js\"   src=\"https://unpkg.com/universal-cookie@3/umd/universalCookie.min.js\"    src src = \"https://unpkg.com/universal-cookie@3/umd/universalCookie.min.js\" \" \" https://unpkg.com/universal-cookie@3/umd/universalCookie.min.js https://unpkg.com/universal-cookie@3/umd/universalCookie.min.js \" \" ></script>  ></script>  ></script>  ></ > </ script script > >   <script <script <script < < script script   crossorigin   crossorigin   crossorigin    crossorigin crossorigin   src=\"https://unpkg.com/react-cookie@3/umd/reactCookie.min.js\"   src=\"https://unpkg.com/react-cookie@3/umd/reactCookie.min.js\"   src=\"https://unpkg.com/react-cookie@3/umd/reactCookie.min.js\"    src src = \"https://unpkg.com/react-cookie@3/umd/reactCookie.min.js\" \" \" https://unpkg.com/react-cookie@3/umd/reactCookie.min.js https://unpkg.com/react-cookie@3/umd/reactCookie.min.js \" \" ></script>  ></script>  ></script>  ></ > </ script script > >   <CookiesProvider />    <CookiesProvider /> Set the user cookies On the server, the cookies props must be set using req.universalCookies or new Cookie(cookieHeader) cookies req.universalCookies new Cookie(cookieHeader) useCookies([dependencies])    useCookies([dependencies]) Access and modify cookies using React hooks. const [cookies, setCookie, removeCookie] = useCookies(['cookie-name']); const [cookies, setCookie, removeCookie] = useCookies(['cookie-name']); const [cookies, setCookie, removeCookie] = useCookies(['cookie-name']); const [cookies, setCookie, removeCookie] = useCookies(['cookie-name']); const const   [ [ cookies cookies , ,   setCookie setCookie , ,   removeCookie removeCookie ] ]   = =   useCookies(['cookie-name']) useCookies useCookies ( ( [ [ 'cookie-name' ' ' cookie-name ' ' ] ] ) ) ; ; React hooks are available starting from React 16.8 React hooks are available starting from React 16.8 dependencies (optional)    dependencies Let you optionally specify a list of cookie names your component depend on or that should trigger a re-render. If unspecified, it will render on every cookie change. cookies    cookies Javascript object with all your cookies. The key is the cookie name. setCookie(name, value, [options])    setCookie(name, value, [options]) Set a cookie value \nname (string): cookie name\nvalue (string|object): save the value and stringify the object if needed\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n name (string): cookie name value (string|object): save the value and stringify the object if needed options (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n \npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n path (string): cookie path, use / as the path if you want your cookie to be accessible on all pages / expires (Date): absolute expiration date for the cookie maxAge (number): relative max age of the cookie from when the client receives it in seconds domain (string): domain for the cookie (sub.domain.com or .allsubdomains.com) secure (boolean): Is only accessible through HTTPS? httpOnly (boolean): Can only the server access the cookie? sameSite (boolean|none|lax|strict): Strict or Lax enforcement removeCookie(name, [options])    removeCookie(name, [options]) Remove a cookie \nname (string): cookie name\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n name (string): cookie name options (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n \npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n path (string): cookie path, use / as the path if you want your cookie to be accessible on all pages / expires (Date): absolute expiration date for the cookie maxAge (number): relative max age of the cookie from when the client receives it in seconds domain (string): domain for the cookie (sub.domain.com or .allsubdomains.com) secure (boolean): Is only accessible through HTTPS? httpOnly (boolean): Can only the server access the cookie? sameSite (boolean|none|lax|strict): Strict or Lax enforcement withCookies(Component)    withCookies(Component) Give access to your cookies anywhere. Add the following props to your component: \ncookies: Cookies instance allowing you to get, set and remove cookies.\nallCookies: All your current cookies in an object.\n cookies: Cookies instance allowing you to get, set and remove cookies. allCookies: All your current cookies in an object. Your original static properties will be hoisted on the returned component. You can also access the original component by using the WrappedComponent static property. Example: WrappedComponent function MyComponent() {  return null;}const NewComponent = withCookies(MyComponent);NewComponent.WrappedComponent === MyComponent; function MyComponent() {  return null;}const NewComponent = withCookies(MyComponent);NewComponent.WrappedComponent === MyComponent; function MyComponent() { function MyComponent() { function MyComponent() function function   MyComponent MyComponent () ( ( ) )   { {   return null;   return null;    return return   null null ; ; } } } } const NewComponent = withCookies(MyComponent); const NewComponent = withCookies(MyComponent); const const   NewComponent NewComponent   = =   withCookies(MyComponent) withCookies withCookies ( ( MyComponent ) ) ; ; NewComponent.WrappedComponent === MyComponent; NewComponent.WrappedComponent === MyComponent; NewComponent NewComponent . . WrappedComponent WrappedComponent   === ===  MyComponent ; ; Cookies    get(name, [options])    get(name, [options]) Get a cookie value \nname (string): cookie name\noptions (object):\n\ndoNotParse (boolean): do not convert the cookie into an object no matter what\n\n\n name (string): cookie name options (object):\n\ndoNotParse (boolean): do not convert the cookie into an object no matter what\n\n \ndoNotParse (boolean): do not convert the cookie into an object no matter what\n doNotParse (boolean): do not convert the cookie into an object no matter what getAll([options])    getAll([options]) Get all cookies \noptions (object):\n\ndoNotParse (boolean): do not convert the cookie into an object no matter what\n\n\n options (object):\n\ndoNotParse (boolean): do not convert the cookie into an object no matter what\n\n \ndoNotParse (boolean): do not convert the cookie into an object no matter what\n doNotParse (boolean): do not convert the cookie into an object no matter what set(name, value, [options])    set(name, value, [options]) Set a cookie value \nname (string): cookie name\nvalue (string|object): save the value and stringify the object if needed\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n name (string): cookie name value (string|object): save the value and stringify the object if needed options (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n \npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n path (string): cookie path, use / as the path if you want your cookie to be accessible on all pages / expires (Date): absolute expiration date for the cookie maxAge (number): relative max age of the cookie from when the client receives it in seconds domain (string): domain for the cookie (sub.domain.com or .allsubdomains.com) secure (boolean): Is only accessible through HTTPS? httpOnly (boolean): Can only the server access the cookie? sameSite (boolean|none|lax|strict): Strict or Lax enforcement remove(name, [options])    remove(name, [options]) Remove a cookie \nname (string): cookie name\noptions (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n\n name (string): cookie name options (object): Support all the cookie options from RFC 6265\n\npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n\n \npath (string): cookie path, use / as the path if you want your cookie to be accessible on all pages\nexpires (Date): absolute expiration date for the cookie\nmaxAge (number): relative max age of the cookie from when the client receives it in seconds\ndomain (string): domain for the cookie (sub.domain.com or .allsubdomains.com)\nsecure (boolean): Is only accessible through HTTPS?\nhttpOnly (boolean): Can only the server access the cookie?\nsameSite (boolean|none|lax|strict): Strict or Lax enforcement\n path (string): cookie path, use / as the path if you want your cookie to be accessible on all pages / expires (Date): absolute expiration date for the cookie maxAge (number): relative max age of the cookie from when the client receives it in seconds domain (string): domain for the cookie (sub.domain.com or .allsubdomains.com) secure (boolean): Is only accessible through HTTPS? httpOnly (boolean): Can only the server access the cookie? sameSite (boolean|none|lax|strict): Strict or Lax enforcement Simple Example with React hooks    // Root.jsximport React from 'react';import App from './App';import { CookiesProvider } from 'react-cookie'; export default function Root() {  return (    <CookiesProvider>      <App />    </CookiesProvider>  );} // Root.jsximport React from 'react';import App from './App';import { CookiesProvider } from 'react-cookie'; export default function Root() {  return (    <CookiesProvider>      <App />    </CookiesProvider>  );} // Root.jsx // Root.jsx // Root.jsx // //  Root.jsx import React from 'react'; import React from 'react'; import React from 'react' import import   React React   from from   'react' ' ' react ' ' ; ; import App from './App'; import App from './App'; import App from './App' import import   App App   from from   './App' ' ' ./App ' ' ; ; import { CookiesProvider } from 'react-cookie'; import { CookiesProvider } from 'react-cookie'; import { CookiesProvider } from 'react-cookie' import import   { {   CookiesProvider CookiesProvider   } }   from from   'react-cookie' ' ' react-cookie ' ' ; ;       export default function Root() { export default function Root() { export default  export export   default default   function Root() function function   Root Root () ( ( ) )   { {   return (   return (    return return   ( (     <CookiesProvider>     <CookiesProvider>      < < CookiesProvider > >       <App />       <App />        < < App  / / > >     </CookiesProvider>     </CookiesProvider>      < < / / CookiesProvider > >   );   );    ) ) ; ; } } } } // App.jsximport React from 'react';import { useCookies } from 'react-cookie'; import NameForm from './NameForm'; function App() {  const [cookies, setCookie] = useCookies(['name']);   function onChange(newName) {    setCookie('name', newName, { path: '/' });  }   return (    <div>      <NameForm name={cookies.name} onChange={onChange} />      {cookies.name && <h1>Hello {cookies.name}!</h1>}    </div>  );} export default App; // App.jsximport React from 'react';import { useCookies } from 'react-cookie'; import NameForm from './NameForm'; function App() {  const [cookies, setCookie] = useCookies(['name']);   function onChange(newName) {    setCookie('name', newName, { path: '/' });  }   return (    <div>      <NameForm name={cookies.name} onChange={onChange} />      {cookies.name && <h1>Hello {cookies.name}!</h1>}    </div>  );} export default App; // App.jsx // App.jsx // App.jsx // //  App.jsx import React from 'react'; import React from 'react'; import React from 'react' import import   React React   from from   'react' ' ' react ' ' ; ; import { useCookies } from 'react-cookie'; import { useCookies } from 'react-cookie'; import { useCookies } from 'react-cookie' import import   { {   useCookies useCookies   } }   from from   'react-cookie' ' ' react-cookie ' ' ; ;       import NameForm from './NameForm'; import NameForm from './NameForm'; import NameForm from './NameForm' import import   NameForm NameForm   from from   './NameForm' ' ' ./NameForm ' ' ; ;       function App() { function App() { function App() function function   App App () ( ( ) )   { {   const [cookies, setCookie] = useCookies(['name']);   const [cookies, setCookie] = useCookies(['name']);    const const   [ [ cookies cookies , ,   setCookie setCookie ] ]   = =   useCookies(['name']) useCookies useCookies (['name']) ( ( [ [ 'name' ' ' name ' ' ] ] ) ) ; ;         function onChange(newName) {   function onChange(newName) {    function onChange(newName) function function   onChange onChange (newName) ( ( newName newName ) )   { {     setCookie('name', newName, { path: '/' });     setCookie('name', newName, { path: '/' });      setCookie('name', newName, { path: '/' }) setCookie setCookie ('name', newName, { path: '/' }) ( ( 'name' ' ' name ' ' , ,  newName , ,   { {  path : :   '/' ' ' / ' '   } } ) ) ; ;   }   }    } }         return (   return (    return return   ( (     <div>     <div>      < < div > >       <NameForm name={cookies.name} onChange={onChange} />       <NameForm name={cookies.name} onChange={onChange} />        < < NameForm name = = { { cookies cookies . . name name } }  onChange = = { { onChange } }   / / > >       {cookies.name && <h1>Hello {cookies.name}!</h1>}       {cookies.name && <h1>Hello {cookies.name}!</h1>}        { { cookies cookies . . name name   && &&   < < h1 > > Hello  { { cookies cookies . . name name } } ! ! < < / / h1 > > } }     </div>     </div>      < < / / div > >   );   );    ) ) ; ; } } } }       export default App; export default App; export default App export export   default default   App App ; ; Simple Example with Higher-Order Component    // Root.jsximport React from 'react';import App from './App';import { CookiesProvider } from 'react-cookie'; export default function Root() {  return (    <CookiesProvider>      <App />    </CookiesProvider>  );} // Root.jsximport React from 'react';import App from './App';import { CookiesProvider } from 'react-cookie'; export default function Root() {  return (    <CookiesProvider>      <App />    </CookiesProvider>  );} // Root.jsx // Root.jsx // Root.jsx // //  Root.jsx import React from 'react'; import React from 'react'; import React from 'react' import import   React React   from from   'react' ' ' react ' ' ; ; import App from './App'; import App from './App'; import App from './App' import import   App App   from from   './App' ' ' ./App ' ' ; ; import { CookiesProvider } from 'react-cookie'; import { CookiesProvider } from 'react-cookie'; import { CookiesProvider } from 'react-cookie' import import   { {   CookiesProvider CookiesProvider   } }   from from   'react-cookie' ' ' react-cookie ' ' ; ;       export default function Root() { export default function Root() { export default  export export   default default   function Root() function function   Root Root () ( ( ) )   { {   return (   return (    return return   ( (     <CookiesProvider>     <CookiesProvider>      < < CookiesProvider > >       <App />       <App />        < < App  / / > >     </CookiesProvider>     </CookiesProvider>      < < / / CookiesProvider > >   );   );    ) ) ; ; } } } } // App.jsximport React, { Component } from 'react';import { instanceOf } from 'prop-types';import { withCookies, Cookies } from 'react-cookie'; import NameForm from './NameForm'; class App extends Component {  static propTypes = {    cookies: instanceOf(Cookies).isRequired  };   constructor(props) {    super(props);     const { cookies } = props;    this.state = {      name: cookies.get('name') || 'Ben'    };  }   handleNameChange(name) {    const { cookies } = this.props;     cookies.set('name', name, { path: '/' });    this.setState({ name });  }   render() {    const { name } = this.state;     return (      <div>        <NameForm name={name} onChange={this.handleNameChange.bind(this)} />        {this.state.name && <h1>Hello {this.state.name}!</h1>}      </div>    );  }} export default withCookies(App); // App.jsximport React, { Component } from 'react';import { instanceOf } from 'prop-types';import { withCookies, Cookies } from 'react-cookie'; import NameForm from './NameForm'; class App extends Component {  static propTypes = {    cookies: instanceOf(Cookies).isRequired  };   constructor(props) {    super(props);     const { cookies } = props;    this.state = {      name: cookies.get('name') || 'Ben'    };  }   handleNameChange(name) {    const { cookies } = this.props;     cookies.set('name', name, { path: '/' });    this.setState({ name });  }   render() {    const { name } = this.state;     return (      <div>        <NameForm name={name} onChange={this.handleNameChange.bind(this)} />        {this.state.name && <h1>Hello {this.state.name}!</h1>}      </div>    );  }} export default withCookies(App); // App.jsx // App.jsx // App.jsx // //  App.jsx import React, { Component } from 'react'; import React, { Component } from 'react'; import React, { Component } from 'react' import import   React React , ,   { {   Component Component   } }   from from   'react' ' ' react ' ' ; ; import { instanceOf } from 'prop-types'; import { instanceOf } from 'prop-types'; import { instanceOf } from 'prop-types' import import   { {   instanceOf instanceOf   } }   from from   'prop-types' ' ' prop-types ' ' ; ; import { withCookies, Cookies } from 'react-cookie'; import { withCookies, Cookies } from 'react-cookie'; import { withCookies, Cookies } from 'react-cookie' import import   { {   withCookies withCookies , ,   Cookies Cookies   } }   from from   'react-cookie' ' ' react-cookie ' ' ; ;       import NameForm from './NameForm'; import NameForm from './NameForm'; import NameForm from './NameForm' import import   NameForm NameForm   from from   './NameForm' ' ' ./NameForm ' ' ; ;       class App extends Component { class App extends Component { class App extends Component class class   App App   extends extends   Component Component   { {   static propTypes = {   static propTypes = {    static static  propTypes  = =   { {     cookies: instanceOf(Cookies).isRequired     cookies: instanceOf(Cookies).isRequired     cookies : :   instanceOf(Cookies) instanceOf instanceOf (Cookies) ( ( Cookies ) ) . . isRequired isRequired   };   };    } } ; ;         constructor(props) {   constructor(props) {    constructor(props) constructor constructor (props) ( ( props props ) )   { {     super(props);     super(props);      super super ( ( props ) ) ; ;           const { cookies } = props;     const { cookies } = props;      const const   { {   cookies cookies   } }   = =  props ; ;     this.state = {     this.state = {      this this . . state state   = =   { {       name: cookies.get('name') || 'Ben'       name: cookies.get('name') || 'Ben'       name : :   cookies cookies .get('name') . . get get ('name') ( ( 'name' ' ' name ' ' ) )   || ||   'Ben' ' ' Ben ' '     };     };      } } ; ;   }   }    } }         handleNameChange(name) {   handleNameChange(name) {    handleNameChange(name) handleNameChange handleNameChange (name) ( ( name name ) )   { {     const { cookies } = this.props;     const { cookies } = this.props;      const const   { {   cookies cookies   } }   = =   this this . . props props ; ;           cookies.set('name', name, { path: '/' });     cookies.set('name', name, { path: '/' });      cookies cookies .set('name', name, { path: '/' }) . . set set ('name', name, { path: '/' }) ( ( 'name' ' ' name ' ' , ,  name , ,   { {  path : :   '/' ' ' / ' '   } } ) ) ; ;     this.setState({ name });     this.setState({ name });      this this .setState({ name }) . . setState setState ({ name }) ( ( { {  name  } } ) ) ; ;   }   }    } }         render() {   render() {    render() render render () ( ( ) )   { {     const { name } = this.state;     const { name } = this.state;      const const   { {   name name   } }   = =   this this . . state state ; ;           return (     return (      return return   ( (       <div>       <div>        < < div > >         <NameForm name={name} onChange={this.handleNameChange.bind(this)} />         <NameForm name={name} onChange={this.handleNameChange.bind(this)} />          < < NameForm name = = { { name } }  onChange = = { { this this . . handleNameChange handleNameChange .bind(this) . . bind bind (this) ( ( this this ) ) } }   / / > >         {this.state.name && <h1>Hello {this.state.name}!</h1>}         {this.state.name && <h1>Hello {this.state.name}!</h1>}          { { this this . . state state . . name name   && &&   < < h1 > > Hello  { { this this . . state state . . name name } } ! ! < < / / h1 > > } }       </div>       </div>        < < / / div > >     );     );      ) ) ; ;   }   }    } } } } } }       export default withCookies(App); export default withCookies(App); export default withCookies export export   default default   withCookies withCookies ( ( App ) ) ; ; Server-Rendering Example    // src/components/App.jsimport React from 'react';import { useCookies } from 'react-cookie'; import NameForm from './NameForm'; function App() {  const [cookies, setCookie] = useCookies(['name']);   function onChange(newName) {    setCookie('name', newName, { path: '/' });  }   return (    <div>      <NameForm name={cookies.name} onChange={onChange} />      {cookies.name && <h1>Hello {cookies.name}!</h1>}    </div>  );} export default App; // src/components/App.jsimport React from 'react';import { useCookies } from 'react-cookie'; import NameForm from './NameForm'; function App() {  const [cookies, setCookie] = useCookies(['name']);   function onChange(newName) {    setCookie('name', newName, { path: '/' });  }   return (    <div>      <NameForm name={cookies.name} onChange={onChange} />      {cookies.name && <h1>Hello {cookies.name}!</h1>}    </div>  );} export default App; // src/components/App.js // src/components/App.js // src/components/App.js // //  src/components/App.js import React from 'react'; import React from 'react'; import React from 'react' import import   React React   from from   'react' ' ' react ' ' ; ; import { useCookies } from 'react-cookie'; import { useCookies } from 'react-cookie'; import { useCookies } from 'react-cookie' import import   { {   useCookies useCookies   } }   from from   'react-cookie' ' ' react-cookie ' ' ; ;       import NameForm from './NameForm'; import NameForm from './NameForm'; import NameForm from './NameForm' import import   NameForm NameForm   from from   './NameForm' ' ' ./NameForm ' ' ; ;       function App() { function App() { function App() function function   App App () ( ( ) )   { {   const [cookies, setCookie] = useCookies(['name']);   const [cookies, setCookie] = useCookies(['name']);    const const   [ [ cookies cookies , ,   setCookie setCookie ] ]   = =   useCookies(['name']) useCookies useCookies (['name']) ( ( [ [ 'name' ' ' name ' ' ] ] ) ) ; ;         function onChange(newName) {   function onChange(newName) {    function onChange(newName) function function   onChange onChange (newName) ( ( newName newName ) )   { {     setCookie('name', newName, { path: '/' });     setCookie('name', newName, { path: '/' });      setCookie('name', newName, { path: '/' }) setCookie setCookie ('name', newName, { path: '/' }) ( ( 'name' ' ' name ' ' , ,  newName , ,   { {  path : :   '/' ' ' / ' '   } } ) ) ; ;   }   }    } }         return (   return (    return return   ( (     <div>     <div>      < < div > >       <NameForm name={cookies.name} onChange={onChange} />       <NameForm name={cookies.name} onChange={onChange} />        < < NameForm name = = { { cookies cookies . . name name } }  onChange = = { { onChange } }   / / > >       {cookies.name && <h1>Hello {cookies.name}!</h1>}       {cookies.name && <h1>Hello {cookies.name}!</h1>}        { { cookies cookies . . name name   && &&   < < h1 > > Hello  { { cookies cookies . . name name } } ! ! < < / / h1 > > } }     </div>     </div>      < < / / div > >   );   );    ) ) ; ; } } } }       export default App; export default App; export default App export export   default default   App App ; ; // src/server.jsimport React from 'react';import ReactDOMServer from 'react-dom/server';import { CookiesProvider } from 'react-cookie'; import Html from './components/Html';import App from './components/App'; export default function middleware(req, res) {  const markup = ReactDOMServer.renderToString(    <CookiesProvider cookies={req.universalCookies}>      <App />    </CookiesProvider>  );   const html = ReactDOMServer.renderToStaticMarkup(<Html markup={markup} />);   res.send('<!DOCTYPE html>' + html);} // src/server.jsimport React from 'react';import ReactDOMServer from 'react-dom/server';import { CookiesProvider } from 'react-cookie'; import Html from './components/Html';import App from './components/App'; export default function middleware(req, res) {  const markup = ReactDOMServer.renderToString(    <CookiesProvider cookies={req.universalCookies}>      <App />    </CookiesProvider>  );   const html = ReactDOMServer.renderToStaticMarkup(<Html markup={markup} />);   res.send('<!DOCTYPE html>' + html);} // src/server.js // src/server.js // src/server.js // //  src/server.js import React from 'react'; import React from 'react'; import React from 'react' import import   React React   from from   'react' ' ' react ' ' ; ; import ReactDOMServer from 'react-dom/server'; import ReactDOMServer from 'react-dom/server'; import ReactDOMServer from 'react-dom/server' import import   ReactDOMServer ReactDOMServer   from from   'react-dom/server' ' ' react-dom/server ' ' ; ; import { CookiesProvider } from 'react-cookie'; import { CookiesProvider } from 'react-cookie'; import { CookiesProvider } from 'react-cookie' import import   { {   CookiesProvider CookiesProvider   } }   from from   'react-cookie' ' ' react-cookie ' ' ; ;       import Html from './components/Html'; import Html from './components/Html'; import Html from './components/Html' import import   Html Html   from from   './components/Html' ' ' ./components/Html ' ' ; ; import App from './components/App'; import App from './components/App'; import App from './components/App' import import   App App   from from   './components/App' ' ' ./components/App ' ' ; ;       export default function middleware(req, res) { export default function middleware(req, res) { export default  export export   default default   function middleware(req, res) function function   middleware middleware (req, res) ( ( req req , ,   res res ) )   { {   const markup = ReactDOMServer.renderToString(   const markup = ReactDOMServer.renderToString(    const const   markup markup   = =   ReactDOMServer ReactDOMServer .renderToString( . . renderToString renderToString ( ( (     <CookiesProvider cookies={req.universalCookies}>     <CookiesProvider cookies={req.universalCookies}>     <CookiesProvider cookies={req.universalCookies}>     <CookiesProvider cookies={req.universalCookies}>      < < CookiesProvider cookies = = { { req req . . universalCookies universalCookies } } > >       <App />       <App />       <App />       <App />        < < App  / / > >     </CookiesProvider>     </CookiesProvider>     </CookiesProvider>     </CookiesProvider>      < < / / CookiesProvider > >   );   );   )   )    ) ) ; ;         const html = ReactDOMServer.renderToStaticMarkup(<Html markup={markup} />);   const html = ReactDOMServer.renderToStaticMarkup(<Html markup={markup} />);    const const   html html   = =   ReactDOMServer ReactDOMServer .renderToStaticMarkup(<Html markup={markup} />) . . renderToStaticMarkup renderToStaticMarkup (<Html markup={markup} />) ( ( < < Html markup = = { { markup } }   / / > > ) ) ; ;         res.send('<!DOCTYPE html>' + html);   res.send('<!DOCTYPE html>' + html);    res res .send('<!DOCTYPE html>' + html) . . send send ('<!DOCTYPE html>' + html) ( ( '<!DOCTYPE html>' ' ' <!DOCTYPE html> ' '   + +  html ) ) ; ; } } } } // src/client.jsimport React from 'react';import ReactDOM from 'react-dom';import { CookiesProvider } from 'react-cookie'; import App from './components/App'; const appEl = document.getElementById('main-app'); ReactDOM.render(  <CookiesProvider>    <App />  </CookiesProvider>,  appEl); // src/client.jsimport React from 'react';import ReactDOM from 'react-dom';import { CookiesProvider } from 'react-cookie'; import App from './components/App'; const appEl = document.getElementById('main-app'); ReactDOM.render(  <CookiesProvider>    <App />  </CookiesProvider>,  appEl); // src/client.js // src/client.js // src/client.js // //  src/client.js import React from 'react'; import React from 'react'; import React from 'react' import import   React React   from from   'react' ' ' react ' ' ; ; import ReactDOM from 'react-dom'; import ReactDOM from 'react-dom'; import ReactDOM from 'react-dom' import import   ReactDOM ReactDOM   from from   'react-dom' ' ' react-dom ' ' ; ; import { CookiesProvider } from 'react-cookie'; import { CookiesProvider } from 'react-cookie'; import { CookiesProvider } from 'react-cookie' import import   { {   CookiesProvider CookiesProvider   } }   from from   'react-cookie' ' ' react-cookie ' ' ; ;       import App from './components/App'; import App from './components/App'; import App from './components/App' import import   App App   from from   './components/App' ' ' ./components/App ' ' ; ;       const appEl = document.getElementById('main-app'); const appEl = document.getElementById('main-app'); const const   appEl appEl   = =   document document .getElementById('main-app') . . getElementById getElementById ('main-app') ( ( 'main-app' ' ' main-app ' ' ) ) ; ;       ReactDOM.render( ReactDOM.render( ReactDOM ReactDOM .render( . . render render ( ( (   <CookiesProvider>   <CookiesProvider>   <CookiesProvider>   <CookiesProvider>    < < CookiesProvider > >     <App />     <App />     <App />     <App />      < < App  / / > >   </CookiesProvider>,   </CookiesProvider>,   </CookiesProvider>,   </CookiesProvider>,    < < / / CookiesProvider > > , ,   appEl   appEl   appEl   appEl   appEl ); ); ) ) ) ) ; ; // server.jsrequire('@babel/register'); const express = require('express');const serverMiddleware = require('./src/server').default;const cookiesMiddleware = require('universal-cookie-express'); const app = express(); app  .use('/assets', express.static('dist'))  .use(cookiesMiddleware())  .use(serverMiddleware); app.listen(8080, function() {  console.log('Listening on 8080...');}); // server.jsrequire('@babel/register'); const express = require('express');const serverMiddleware = require('./src/server').default;const cookiesMiddleware = require('universal-cookie-express'); const app = express(); app  .use('/assets', express.static('dist'))  .use(cookiesMiddleware())  .use(serverMiddleware); app.listen(8080, function() {  console.log('Listening on 8080...');}); // server.js // server.js // server.js // //  server.js require('@babel/register'); require('@babel/register'); require('@babel/register') require require ('@babel/register') ( ( '@babel/register' ' ' @babel/register ' ' ) ) ; ;       const express = require('express'); const express = require('express'); const const   express express   = =   require('express') require require ('express') ( ( 'express' ' ' express ' ' ) ) ; ; const serverMiddleware = require('./src/server').default; const serverMiddleware = require('./src/server').default; const const   serverMiddleware serverMiddleware   = =   require('./src/server') require require ('./src/server') ( ( './src/server' ' ' ./src/server ' ' ) ) . . default default ; ; const cookiesMiddleware = require('universal-cookie-express'); const cookiesMiddleware = require('universal-cookie-express'); const const   cookiesMiddleware cookiesMiddleware   = =   require('universal-cookie-express') require require ('universal-cookie-express') ( ( 'universal-cookie-express' ' ' universal-cookie-express ' ' ) ) ; ;       const app = express(); const app = express(); const const   app app   = =   express() express express () ( ( ) ) ; ;       app app app   .use('/assets', express.static('dist'))   .use('/assets', express.static('dist'))    .use('/assets', express.static('dist')) . . use use ('/assets', express.static('dist')) ( ( '/assets' ' ' /assets ' ' , ,   express express .static('dist') . . static static ('dist') ( ( 'dist' ' ' dist ' ' ) ) ) )   .use(cookiesMiddleware())   .use(cookiesMiddleware())    .use(cookiesMiddleware()) . . use use (cookiesMiddleware()) ( ( cookiesMiddleware() cookiesMiddleware cookiesMiddleware () ( ( ) ) ) )   .use(serverMiddleware);   .use(serverMiddleware);    .use(serverMiddleware) . . use use (serverMiddleware) ( ( serverMiddleware ) ) ; ;       app.listen(8080, function() { app.listen(8080, function() { app app .listen(8080, function() { . . listen listen (8080, function() { ( ( 8080 8080 , ,   function() function function () ( ( ) )   { {   console.log('Listening on 8080...');   console.log('Listening on 8080...');   console.log('Listening on 8080...');   console.log('Listening on 8080...');    console console .log('Listening on 8080...') . . log log ('Listening on 8080...') ( ( 'Listening on 8080...' ' ' Listening on 8080... ' ' ) ) ; ; }); }); }) }) } } ) ) ; ; Keywordsuniversalisomophiccookiereact Keywords universalisomophiccookiereact universal universal isomophic isomophic cookie cookie react react Installnpm i react-cookieDownloadsWeekly Downloads174,284Version4.0.3LicenseMITUnpacked Size96 kBTotal Files48Homepagegithub.com/reactivestack/cookies/tree/master/packages/react-cookie/#readmeRepositoryGitgithub.com/reactivestack/cookiesLast publish8 months agoCollaboratorsTry on RunKitReport a vulnerability Install npm i react-cookie         npm i react-cookie npm i react-cookie   DownloadsWeekly Downloads174,284 DownloadsWeekly Downloads174,284 DownloadsWeekly Downloads Downloads Downloads    174,284  174,284 Version4.0.3 Version 4.0.3 LicenseMIT License MIT Unpacked Size96 kB Unpacked Size 96 kB Total Files48 Total Files 48 Homepagegithub.com/reactivestack/cookies/tree/master/packages/react-cookie/#readme Homepage github.com/reactivestack/cookies/tree/master/packages/react-cookie/#readme github.com/reactivestack/cookies/tree/master/packages/react-cookie/#readme   RepositoryGitgithub.com/reactivestack/cookies Repository Gitgithub.com/reactivestack/cookies Gitgithub.com/reactivestack/cookies Git Git Git   github.com/reactivestack/cookies Last publish8 months ago Last publish 8 months ago 8 months ago Collaborators Collaborators      Try on RunKit Try on RunKit   Try Report a vulnerability Report a vulnerability   Report SupportHelpCommunityAdvisoriesStatusContact npmCompanyAboutBlogPressTerms & PoliciesPoliciesTerms of UseCode of ConductPrivacy SupportHelpCommunityAdvisoriesStatusContact npmCompanyAboutBlogPressTerms & PoliciesPoliciesTerms of UseCode of ConductPrivacy      SupportHelpCommunityAdvisoriesStatusContact npm Support HelpCommunityAdvisoriesStatusContact npm Help Help Community Community Advisories Advisories Status Status Contact npm Contact npm CompanyAboutBlogPress Company AboutBlogPress About About Blog Blog Press Press Terms & PoliciesPoliciesTerms of UseCode of ConductPrivacy Terms & Policies PoliciesTerms of UseCode of ConductPrivacy Policies Policies Terms of Use Terms of Use Code of Conduct Code of Conduct Privacy Privacy     ","title":"react-cookie  -  npmDownloadsGit"},"highlight":{"data":["The key is the <b>cookie</b> name.\nsetCookie(name, value, [options])\nSet a <b>cookie</b> value\n\nname (string): <b>cookie</b>","The key is the <b>cookie</b> name.\nsetCookie(name, value, [options])\nSet a <b>cookie</b> value\n\nname (string): <b>cookie</b>","The key is the <b>cookie</b> name.\nsetCookie(name, value, [options])\nSet a <b>cookie</b> value\n\nname (string): <b>cookie</b>","The key is the <b>cookie</b> name.\nsetCookie(name, value, [options])\nSet a <b>cookie</b> value\n\nname (string): <b>cookie</b>","universal-<b>cookie</b> - Universal cookies for JavaScript universal-<b>cookie</b> universal-<b>cookie</b> universal-<b>cookie</b>-express"],"link":["https://www.npmjs.com/package/react-<b>cookie</b>"],"title":["react-<b>cookie</b>  -  npmDownloadsGit"]}}